{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import re\n",
    "import time\n",
    "import os\n",
    "import nltk\n",
    "import wordcloud\n",
    "import gensim\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from bs4 import BeautifulSoup \n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn import decomposition\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.decomposition import LatentDirichletAllocation\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "# nltk.download('punkt')\n",
    "# nltk.download('stopwords')\n",
    "# nltk.download('wordnet')\n",
    "import keras\n",
    "from keras.preprocessing.text import one_hot,Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense , Flatten ,Embedding,Input,CuDNNLSTM,LSTM\n",
    "from keras.models import Model\n",
    "from keras.preprocessing.text import text_to_word_sequence\n",
    "\n",
    "# from tensorflow.contrib.rnn import *\n",
    "# from tensorflow.python.layers.core import Dense\n",
    "# from tensorflow.python.ops.rnn_cell_impl import _zero_state_tensors\n",
    "# print('TensorFlow Version: {}'.format(tf.__version__))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\zjh41\\\\Downloads'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] File b'Reviews.csv' does not exist: b'Reviews.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-3-4d1ae1815cbf>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mreviews\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Reviews.csv\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mreviews\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\python\\lib\\site-packages\\pandas\\io\\parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[1;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[0;32m    683\u001b[0m         )\n\u001b[0;32m    684\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 685\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    686\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    687\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\python\\lib\\site-packages\\pandas\\io\\parsers.py\u001b[0m in \u001b[0;36m_read\u001b[1;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[0;32m    455\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    456\u001b[0m     \u001b[1;31m# Create the parser.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 457\u001b[1;33m     \u001b[0mparser\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    458\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    459\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\python\\lib\\site-packages\\pandas\\io\\parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[0;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"has_index_names\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"has_index_names\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    894\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 895\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    896\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    897\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\python\\lib\\site-packages\\pandas\\io\\parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[1;34m(self, engine)\u001b[0m\n\u001b[0;32m   1133\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"c\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1134\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"c\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1135\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1136\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1137\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"python\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\python\\lib\\site-packages\\pandas\\io\\parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, src, **kwds)\u001b[0m\n\u001b[0;32m   1915\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"usecols\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1916\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1917\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1918\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1919\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] File b'Reviews.csv' does not exist: b'Reviews.csv'"
     ]
    }
   ],
   "source": [
    "reviews = pd.read_csv(\"Reviews.csv\")\n",
    "reviews.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Review # 1\n",
      "Good Quality Dog Food\n",
      "I have bought several of the Vitality canned dog food products and have found them all to be of good quality. The product looks more like a stew than a processed meat and it smells better. My Labrador is finicky and she appreciates this product better than  most.\n",
      "\n",
      "Review # 2\n",
      "Not as Advertised\n",
      "Product arrived labeled as Jumbo Salted Peanuts...the peanuts were actually small sized unsalted. Not sure if this was an error or if the vendor intended to represent the product as \"Jumbo\".\n",
      "\n",
      "Review # 3\n",
      "\"Delight\" says it all\n",
      "This is a confection that has been around a few centuries.  It is a light, pillowy citrus gelatin with nuts - in this case Filberts. And it is cut into tiny squares and then liberally coated with powdered sugar.  And it is a tiny mouthful of heaven.  Not too chewy, and very flavorful.  I highly recommend this yummy treat.  If you are familiar with the story of C.S. Lewis' \"The Lion, The Witch, and The Wardrobe\" - this is the treat that seduces Edmund into selling out his Brother and Sisters to the Witch.\n",
      "\n",
      "Review # 4\n",
      "Cough Medicine\n",
      "If you are looking for the secret ingredient in Robitussin I believe I have found it.  I got this in addition to the Root Beer Extract I ordered (which was good) and made some cherry soda.  The flavor is very medicinal.\n",
      "\n",
      "Review # 5\n",
      "Great taffy\n",
      "Great taffy at a great price.  There was a wide assortment of yummy taffy.  Delivery was very quick.  If your a taffy lover, this is a deal.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Inspecting some of the reviews\n",
    "for i in range(5):\n",
    "    print(\"Review #\",i+1)\n",
    "    print(reviews.Summary[i])\n",
    "    print(reviews.Text[i])\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id                         0\n",
       "ProductId                  0\n",
       "UserId                     0\n",
       "ProfileName               16\n",
       "HelpfulnessNumerator       0\n",
       "HelpfulnessDenominator     0\n",
       "Score                      0\n",
       "Time                       0\n",
       "Summary                   27\n",
       "Text                       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check for missings \n",
    "# 27 are missing, so we will drop those!\n",
    "reviews.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "568454"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop missing summary. \n",
    "reviews.dropna(subset=['Text'],inplace = True)\n",
    "reviews.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop duolicate [score,text]\n",
    "reviews.drop_duplicates(subset=['Text','Score'],keep = 'first',inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mark_sentiment(rating):\n",
    "    if(rating<=3):\n",
    "        return 0\n",
    "    else:\n",
    "        return 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews['sentiment']=reviews['Score'].apply(mark_sentiment)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "cloud = wordcloud.WordCloud(background_color='gray', max_font_size=60, \n",
    "                                relative_scaling=1).generate(' '.join(reviews.Text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e45343cb38>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(20, 10))\n",
    "plt.axis('off')\n",
    "plt.imshow(cloud)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part one: Document Clustering and Topic Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preprocessing: Tokenizing and Stemming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_train = reviews.loc[:int(reviews.shape[0]*0.07), 'Text']\n",
    "df_train = reviews.loc[:1000, 'Text']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We use 185 stop-words from nltk library.\n",
      "['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\"]\n"
     ]
    }
   ],
   "source": [
    "# Use nltk's English stopwords.\n",
    "stopwords = nltk.corpus.stopwords.words('english')\n",
    "stopwords.append(\"'s\")\n",
    "stopwords.append(\"'m\")\n",
    "stopwords.append(\"n't\")\n",
    "stopwords.append(\"br\")\n",
    "stopwords.append(\"'d\")\n",
    "stopwords.append(\"/a\")\n",
    "print (\"We use \" + str(len(stopwords)) + \" stop-words from nltk library.\")\n",
    "print (stopwords[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "stemmer = SnowballStemmer(\"english\")\n",
    "\n",
    "# tokenization and stemming\n",
    "def tokenization_and_stemming(text):\n",
    "    tokens = []\n",
    "    # exclude stop words and tokenize the document, generate a list of string \n",
    "    for word in nltk.word_tokenize(text):\n",
    "        if word.lower() not in stopwords:\n",
    "            tokens.append(word.lower())\n",
    "\n",
    "    filtered_tokens = []\n",
    "    \n",
    "    # filter out any tokens not containing letters (e.g., numeric tokens, raw punctuation)\n",
    "    for token in tokens:\n",
    "        if re.search('[a-zA-Z]', token):\n",
    "            filtered_tokens.append(token)\n",
    "            \n",
    "    # stemming\n",
    "    stems = [stemmer.stem(t) for t in filtered_tokens]\n",
    "    return stems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['bought',\n",
       " 'sever',\n",
       " 'vital',\n",
       " 'can',\n",
       " 'dog',\n",
       " 'food',\n",
       " 'product',\n",
       " 'found',\n",
       " 'good',\n",
       " 'qualiti',\n",
       " 'product',\n",
       " 'look',\n",
       " 'like',\n",
       " 'stew',\n",
       " 'process',\n",
       " 'meat',\n",
       " 'smell',\n",
       " 'better',\n",
       " 'labrador',\n",
       " 'finicki',\n",
       " 'appreci',\n",
       " 'product',\n",
       " 'better']"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokenization_and_stemming(df_train[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TF-IDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "In total, there are 998 reviews and 570 terms.\n"
     ]
    }
   ],
   "source": [
    "tfidf_model = TfidfVectorizer(max_df=0.99, max_features=1000,\n",
    "                                 min_df=0.01, stop_words='english',\n",
    "                                 use_idf=True, tokenizer=tokenization_and_stemming, ngram_range=(1,1))\n",
    "\n",
    "tfidf_matrix = tfidf_model.fit_transform(df_train) #fit the vectorizer to synopses\n",
    "\n",
    "print (\"In total, there are \" + str(tfidf_matrix.shape[0]) + \\\n",
    "      \" reviews and \" + str(tfidf_matrix.shape[1]) + \" terms.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'analyzer': 'word',\n",
       " 'binary': False,\n",
       " 'decode_error': 'strict',\n",
       " 'dtype': numpy.float64,\n",
       " 'encoding': 'utf-8',\n",
       " 'input': 'content',\n",
       " 'lowercase': True,\n",
       " 'max_df': 0.99,\n",
       " 'max_features': 1000,\n",
       " 'min_df': 0.01,\n",
       " 'ngram_range': (1, 1),\n",
       " 'norm': 'l2',\n",
       " 'preprocessor': None,\n",
       " 'smooth_idf': True,\n",
       " 'stop_words': 'english',\n",
       " 'strip_accents': None,\n",
       " 'sublinear_tf': False,\n",
       " 'token_pattern': '(?u)\\\\b\\\\w\\\\w+\\\\b',\n",
       " 'tokenizer': <function __main__.tokenization_and_stemming(text)>,\n",
       " 'use_idf': True,\n",
       " 'vocabulary': None}"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfidf_model.get_params()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save the terms identified by TF-IDF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['abl',\n",
       " 'absolut',\n",
       " 'actual',\n",
       " 'ad',\n",
       " 'add',\n",
       " 'addict',\n",
       " 'addit',\n",
       " 'advertis',\n",
       " 'afternoon',\n",
       " 'aftertast',\n",
       " 'agav',\n",
       " 'age',\n",
       " 'ago',\n",
       " 'agre',\n",
       " 'allergi',\n",
       " 'allow',\n",
       " 'alreadi',\n",
       " 'altern',\n",
       " 'alway',\n",
       " 'amaz',\n",
       " 'amazon',\n",
       " 'anoth',\n",
       " 'anymor',\n",
       " 'anyon',\n",
       " 'anyth',\n",
       " 'anywher',\n",
       " 'appl',\n",
       " 'area',\n",
       " 'aroma',\n",
       " 'arriv',\n",
       " 'artifici',\n",
       " 'ask',\n",
       " 'ate',\n",
       " 'avail',\n",
       " 'away',\n",
       " 'awesom',\n",
       " 'babi',\n",
       " 'bad',\n",
       " 'bag',\n",
       " 'bake',\n",
       " 'balanc',\n",
       " 'bar',\n",
       " 'base',\n",
       " 'bbq',\n",
       " 'bean',\n",
       " 'beat',\n",
       " 'becom',\n",
       " 'believ',\n",
       " 'berri',\n",
       " 'best',\n",
       " 'better',\n",
       " 'big',\n",
       " 'bit',\n",
       " 'bite',\n",
       " 'bitter',\n",
       " 'black',\n",
       " 'bland',\n",
       " 'blend',\n",
       " 'bodi',\n",
       " 'bottl',\n",
       " 'bought',\n",
       " 'bowl',\n",
       " 'box',\n",
       " 'brand',\n",
       " 'breakfast',\n",
       " 'brew',\n",
       " 'bring',\n",
       " 'broken',\n",
       " 'brown',\n",
       " 'bulk',\n",
       " 'burn',\n",
       " 'butter',\n",
       " 'buy',\n",
       " 'ca',\n",
       " 'cake',\n",
       " 'calori',\n",
       " 'came',\n",
       " 'candi',\n",
       " 'caramel',\n",
       " 'care',\n",
       " 'carri',\n",
       " 'case',\n",
       " 'cat',\n",
       " 'caus',\n",
       " 'certain',\n",
       " 'chang',\n",
       " 'cheaper',\n",
       " 'cheddar',\n",
       " 'chees',\n",
       " 'chemic',\n",
       " 'chew',\n",
       " 'chicken',\n",
       " 'chip',\n",
       " 'chocol',\n",
       " 'choic',\n",
       " 'christma',\n",
       " 'cinnamon',\n",
       " 'classic',\n",
       " 'clean',\n",
       " 'clear',\n",
       " 'coat',\n",
       " 'coffe',\n",
       " 'cold',\n",
       " 'color',\n",
       " 'combin',\n",
       " 'come',\n",
       " 'compani',\n",
       " 'compar',\n",
       " 'complet',\n",
       " 'consid',\n",
       " 'consist',\n",
       " 'consum',\n",
       " 'contain',\n",
       " 'content',\n",
       " 'continu',\n",
       " 'control',\n",
       " 'conveni',\n",
       " 'cook',\n",
       " 'cooki',\n",
       " 'corn',\n",
       " 'cost',\n",
       " 'countri',\n",
       " 'coupl',\n",
       " 'cours',\n",
       " 'cream',\n",
       " 'crisp',\n",
       " 'crispi',\n",
       " 'crunch',\n",
       " 'crunchi',\n",
       " 'cup',\n",
       " 'custom',\n",
       " 'cut',\n",
       " 'daili',\n",
       " 'dark',\n",
       " 'date',\n",
       " 'daughter',\n",
       " 'day',\n",
       " 'deal',\n",
       " 'decid',\n",
       " 'definit',\n",
       " 'delici',\n",
       " 'delight',\n",
       " 'deliv',\n",
       " 'deliveri',\n",
       " 'diet',\n",
       " 'differ',\n",
       " 'dijon',\n",
       " 'dinner',\n",
       " 'dip',\n",
       " 'direct',\n",
       " 'disappoint',\n",
       " 'discov',\n",
       " 'dish',\n",
       " 'dog',\n",
       " 'dri',\n",
       " 'drink',\n",
       " 'earth',\n",
       " 'easi',\n",
       " 'easier',\n",
       " 'easili',\n",
       " 'eat',\n",
       " 'eaten',\n",
       " 'effect',\n",
       " 'egg',\n",
       " 'els',\n",
       " 'end',\n",
       " 'energi',\n",
       " 'enjoy',\n",
       " 'entir',\n",
       " 'especi',\n",
       " 'everi',\n",
       " 'everyon',\n",
       " 'everyth',\n",
       " 'exact',\n",
       " 'excel',\n",
       " 'excit',\n",
       " 'expect',\n",
       " 'expens',\n",
       " 'experi',\n",
       " 'expir',\n",
       " 'extra',\n",
       " 'extrem',\n",
       " 'fact',\n",
       " 'fair',\n",
       " 'fall',\n",
       " 'famili',\n",
       " 'fan',\n",
       " 'fantast',\n",
       " 'far',\n",
       " 'fast',\n",
       " 'fat',\n",
       " 'favorit',\n",
       " 'feed',\n",
       " 'feel',\n",
       " 'figur',\n",
       " 'final',\n",
       " 'fine',\n",
       " 'finish',\n",
       " 'fish',\n",
       " 'fit',\n",
       " 'flavor',\n",
       " 'flour',\n",
       " 'follow',\n",
       " 'food',\n",
       " 'form',\n",
       " 'free',\n",
       " 'fresh',\n",
       " 'fri',\n",
       " 'friend',\n",
       " 'fruit',\n",
       " 'fun',\n",
       " 'garlic',\n",
       " 'gave',\n",
       " 'gift',\n",
       " 'ginger',\n",
       " 'given',\n",
       " 'glad',\n",
       " 'glass',\n",
       " 'goe',\n",
       " 'gone',\n",
       " 'good',\n",
       " 'got',\n",
       " 'gourmet',\n",
       " 'greasi',\n",
       " 'great',\n",
       " 'green',\n",
       " 'groceri',\n",
       " 'guess',\n",
       " 'gum',\n",
       " 'half',\n",
       " 'hand',\n",
       " 'happen',\n",
       " 'happi',\n",
       " 'hard',\n",
       " 'hate',\n",
       " 'health',\n",
       " 'healthi',\n",
       " 'healthier',\n",
       " 'heat',\n",
       " 'heavi',\n",
       " 'help',\n",
       " 'high',\n",
       " 'higher',\n",
       " 'hint',\n",
       " 'hit',\n",
       " 'hold',\n",
       " 'home',\n",
       " 'honey',\n",
       " 'hook',\n",
       " 'hope',\n",
       " 'horribl',\n",
       " 'hot',\n",
       " 'hour',\n",
       " 'howev',\n",
       " 'href=',\n",
       " 'http',\n",
       " 'huge',\n",
       " 'husband',\n",
       " 'ice',\n",
       " 'idea',\n",
       " 'immedi',\n",
       " 'impress',\n",
       " 'includ',\n",
       " 'individu',\n",
       " 'ingredi',\n",
       " 'insid',\n",
       " 'instant',\n",
       " 'instead',\n",
       " 'introduc',\n",
       " 'issu',\n",
       " 'item',\n",
       " 'jalapeno',\n",
       " 'jar',\n",
       " 'juic',\n",
       " 'kettl',\n",
       " 'kick',\n",
       " 'kid',\n",
       " 'kind',\n",
       " 'know',\n",
       " 'label',\n",
       " 'larg',\n",
       " 'larger',\n",
       " 'lay',\n",
       " 'learn',\n",
       " 'leav',\n",
       " 'left',\n",
       " 'let',\n",
       " 'level',\n",
       " 'life',\n",
       " 'light',\n",
       " 'like',\n",
       " 'limit',\n",
       " 'line',\n",
       " 'liquid',\n",
       " 'list',\n",
       " 'littl',\n",
       " 'live',\n",
       " 'll',\n",
       " 'local',\n",
       " 'long',\n",
       " 'longer',\n",
       " 'look',\n",
       " 'lot',\n",
       " 'love',\n",
       " 'low',\n",
       " 'lower',\n",
       " 'lunch',\n",
       " 'make',\n",
       " 'mani',\n",
       " 'manufactur',\n",
       " 'mapl',\n",
       " 'market',\n",
       " 'mayb',\n",
       " 'mccann',\n",
       " 'meal',\n",
       " 'mean',\n",
       " 'meat',\n",
       " 'melt',\n",
       " 'mention',\n",
       " 'mess',\n",
       " 'mild',\n",
       " 'milk',\n",
       " 'mind',\n",
       " 'mint',\n",
       " 'minut',\n",
       " 'miss',\n",
       " 'mix',\n",
       " 'money',\n",
       " 'month',\n",
       " 'morn',\n",
       " 'mother',\n",
       " 'mouth',\n",
       " 'natur',\n",
       " 'near',\n",
       " 'need',\n",
       " 'new',\n",
       " 'nice',\n",
       " 'normal',\n",
       " 'note',\n",
       " 'noth',\n",
       " 'notic',\n",
       " 'number',\n",
       " 'nut',\n",
       " 'nutrit',\n",
       " 'oat',\n",
       " 'oatmeal',\n",
       " 'offer',\n",
       " 'oh',\n",
       " 'oil',\n",
       " 'ok',\n",
       " 'old',\n",
       " 'onion',\n",
       " 'onlin',\n",
       " 'open',\n",
       " 'option',\n",
       " 'order',\n",
       " 'organ',\n",
       " 'origin',\n",
       " 'ounc',\n",
       " 'overpow',\n",
       " 'oz',\n",
       " 'pack',\n",
       " 'packag',\n",
       " 'paid',\n",
       " 'pain',\n",
       " 'pancak',\n",
       " 'parti',\n",
       " 'particular',\n",
       " 'past',\n",
       " 'pay',\n",
       " 'peanut',\n",
       " 'peopl',\n",
       " 'pepper',\n",
       " 'perfect',\n",
       " 'perhap',\n",
       " 'person',\n",
       " 'pick',\n",
       " 'piec',\n",
       " 'place',\n",
       " 'plain',\n",
       " 'plan',\n",
       " 'plastic',\n",
       " 'pleas',\n",
       " 'pleasant',\n",
       " 'plenti',\n",
       " 'plus',\n",
       " 'pop',\n",
       " 'portion',\n",
       " 'potato',\n",
       " 'pound',\n",
       " 'powder',\n",
       " 'prefer',\n",
       " 'prepar',\n",
       " 'pretti',\n",
       " 'price',\n",
       " 'prime',\n",
       " 'probabl',\n",
       " 'problem',\n",
       " 'process',\n",
       " 'product',\n",
       " 'protein',\n",
       " 'purchas',\n",
       " 'qualiti',\n",
       " 'quick',\n",
       " 'quit',\n",
       " 'raw',\n",
       " 'read',\n",
       " 'real',\n",
       " 'realiz',\n",
       " 'realli',\n",
       " 'reason',\n",
       " 'receiv',\n",
       " 'recent',\n",
       " 'recip',\n",
       " 'recommend',\n",
       " 'red',\n",
       " 'reduc',\n",
       " 'regular',\n",
       " 'replac',\n",
       " 'rest',\n",
       " 'restaur',\n",
       " 'result',\n",
       " 'return',\n",
       " 'review',\n",
       " 'rice',\n",
       " 'rich',\n",
       " 'right',\n",
       " 'run',\n",
       " 'said',\n",
       " 'sale',\n",
       " 'salsa',\n",
       " 'salt',\n",
       " 'salti',\n",
       " 'sandwich',\n",
       " 'satisfi',\n",
       " 'sauc',\n",
       " 'save',\n",
       " 'saw',\n",
       " 'say',\n",
       " 'sea',\n",
       " 'season',\n",
       " 'second',\n",
       " 'seen',\n",
       " 'select',\n",
       " 'sell',\n",
       " 'seller',\n",
       " 'serv',\n",
       " 'servic',\n",
       " 'set',\n",
       " 'sever',\n",
       " 'share',\n",
       " 'ship',\n",
       " 'shop',\n",
       " 'shot',\n",
       " 'similar',\n",
       " 'sinc',\n",
       " 'singl',\n",
       " 'sit',\n",
       " 'size',\n",
       " 'slight',\n",
       " 'small',\n",
       " 'smaller',\n",
       " 'smell',\n",
       " 'smooth',\n",
       " 'snack',\n",
       " 'sodium',\n",
       " 'soft',\n",
       " 'someon',\n",
       " 'someth',\n",
       " 'sometim',\n",
       " 'somewhat',\n",
       " 'son',\n",
       " 'soon',\n",
       " 'sort',\n",
       " 'sour',\n",
       " 'soy',\n",
       " 'specif',\n",
       " 'spice',\n",
       " 'spici',\n",
       " 'stale',\n",
       " 'star',\n",
       " 'start',\n",
       " 'state',\n",
       " 'stay',\n",
       " 'stick',\n",
       " 'stock',\n",
       " 'stop',\n",
       " 'store',\n",
       " 'strawberri',\n",
       " 'strong',\n",
       " 'stuff',\n",
       " 'style',\n",
       " 'subscrib',\n",
       " 'substitut',\n",
       " 'subtl',\n",
       " 'sugar',\n",
       " 'suggest',\n",
       " 'summer',\n",
       " 'super',\n",
       " 'supermarket',\n",
       " 'sure',\n",
       " 'surpris',\n",
       " 'sweet',\n",
       " 'sweeten',\n",
       " 'switch',\n",
       " 'syrup',\n",
       " 'tangi',\n",
       " 'tast',\n",
       " 'tasti',\n",
       " 'tea',\n",
       " 'tell',\n",
       " 'terribl',\n",
       " 'textur',\n",
       " 'thai',\n",
       " 'thank',\n",
       " 'thicker',\n",
       " 'thing',\n",
       " 'think',\n",
       " 'thought',\n",
       " 'throw',\n",
       " 'time',\n",
       " 'tin',\n",
       " 'tini',\n",
       " 'tire',\n",
       " 'togeth',\n",
       " 'told',\n",
       " 'tomato',\n",
       " 'took',\n",
       " 'tortilla',\n",
       " 'total',\n",
       " 'tran',\n",
       " 'treat',\n",
       " 'tri',\n",
       " 'turn',\n",
       " 'twizzler',\n",
       " 'type',\n",
       " 'typic',\n",
       " 'unfortun',\n",
       " 'uniqu',\n",
       " 'unless',\n",
       " 'use',\n",
       " 'usual',\n",
       " 'valu',\n",
       " 'varieti',\n",
       " 've',\n",
       " 'veget',\n",
       " 'version',\n",
       " 'vet',\n",
       " 'vinegar',\n",
       " 'want',\n",
       " 'wast',\n",
       " 'watch',\n",
       " 'water',\n",
       " 'way',\n",
       " 'week',\n",
       " 'weight',\n",
       " 'went',\n",
       " 'white',\n",
       " 'wish',\n",
       " 'wo',\n",
       " 'wonder',\n",
       " 'work',\n",
       " 'world',\n",
       " 'worth',\n",
       " 'wrap',\n",
       " 'write',\n",
       " 'wrong',\n",
       " 'year',\n",
       " 'yes',\n",
       " 'yummi']"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf_selected_words = tfidf_model.get_feature_names()\n",
    "tf_selected_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<998x570 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 18069 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfidf_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## K-means clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "# k-means clustering\n",
    "num_clusters = 5\n",
    "\n",
    "# number of clusters\n",
    "km = KMeans(n_clusters=num_clusters)\n",
    "km.fit(tfidf_matrix)\n",
    "\n",
    "clusters = km.labels_.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create DataFrame films from all of the input files.\n",
    "product = { 'review': df_train[:1001], 'cluster': clusters}\n",
    "frame = pd.DataFrame(product, columns = ['review', 'cluster'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>I have bought several of the Vitality canned d...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>This is a confection that has been around a fe...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>If you are looking for the secret ingredient i...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Great taffy at a great price.  There was a wid...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>I got a wild hair for taffy and ordered this f...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>This saltwater taffy had great flavors and was...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>This taffy is so good.  It is very soft and ch...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Right now I'm mostly just sprouting this so my...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>This is a very healthy dog food. Good for thei...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  cluster\n",
       "0  I have bought several of the Vitality canned d...        0\n",
       "1  Product arrived labeled as Jumbo Salted Peanut...        1\n",
       "2  This is a confection that has been around a fe...        1\n",
       "3  If you are looking for the secret ingredient i...        1\n",
       "4  Great taffy at a great price.  There was a wid...        1\n",
       "5  I got a wild hair for taffy and ordered this f...        1\n",
       "6  This saltwater taffy had great flavors and was...        1\n",
       "7  This taffy is so good.  It is very soft and ch...        1\n",
       "8  Right now I'm mostly just sprouting this so my...        0\n",
       "9  This is a very healthy dog food. Good for thei...        0"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of reviews included in each cluster:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cluster\n",
       "1      568\n",
       "2      216\n",
       "0       98\n",
       "3       62\n",
       "4       54"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print (\"Number of reviews included in each cluster:\")\n",
    "frame['cluster'].value_counts().to_frame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.00360681, 0.00349821, 0.01427033, ..., 0.02611322, 0.0017417 ,\n",
       "        0.        ],\n",
       "       [0.00494149, 0.00546931, 0.00706965, ..., 0.00989621, 0.0022369 ,\n",
       "        0.00475609],\n",
       "       [0.00435911, 0.0123226 , 0.01142708, ..., 0.00575551, 0.00117163,\n",
       "        0.00642976],\n",
       "       [0.00781508, 0.00461294, 0.00671251, ..., 0.02734263, 0.        ,\n",
       "        0.00151107],\n",
       "       [0.00487779, 0.        , 0.00615251, ..., 0.00952194, 0.00493239,\n",
       "        0.        ]])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km.cluster_centers_\n",
    "\n",
    "#241数的list -> cluster 0的中心点的tf-idf值\n",
    "#-> assumption: 中心点的值可以代表这个cluster\n",
    "#-> tf-idf值越大，对应的词越能代表这个document\n",
    "#-> 选出了tf-idf最大的6个值对应的词来代表这个cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 570)"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km.cluster_centers_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Document clustering result by K-means>\n",
      "Cluster 0 words:food,dog,babi,cat,eat,love,\n",
      "Cluster 0 reviews (98 reviews): \n",
      "Cluster 1 words:product,tast,good,great,use,love,\n",
      "Cluster 1 reviews (568 reviews): \n",
      "Cluster 2 words:chip,bag,kettl,flavor,potato,salt,\n",
      "Cluster 2 reviews (216 reviews): \n",
      "Cluster 3 words:tea,drink,tast,like,tri,black,\n",
      "Cluster 3 reviews (62 reviews): \n",
      "Cluster 4 words:coffe,tast,cup,blend,ve,flavor,\n",
      "Cluster 4 reviews (54 reviews): \n"
     ]
    }
   ],
   "source": [
    "print (\"<Document clustering result by K-means>\")\n",
    "\n",
    "#km.cluster_centers_ denotes the importances of each items in centroid.\n",
    "#We need to sort it in decreasing-order and get the top k items.\n",
    "order_centroids = km.cluster_centers_.argsort()[:, ::-1] \n",
    "\n",
    "Cluster_keywords_summary = {}\n",
    "for i in range(num_clusters):\n",
    "    print (\"Cluster \" + str(i) + \" words:\", end='')\n",
    "    Cluster_keywords_summary[i] = []\n",
    "    for ind in order_centroids[i, :6]: #replace 6 with n words per cluster\n",
    "        Cluster_keywords_summary[i].append(tf_selected_words[ind])\n",
    "        print (tf_selected_words[ind] + \",\", end='')\n",
    "    print ()\n",
    "    \n",
    "    cluster_reviews = frame[frame.cluster==i].review.tolist()\n",
    "    print (\"Cluster \" + str(i) + \" reviews (\" + str(len(cluster_reviews)) + \" reviews): \")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA60AAAIMCAYAAAAekkogAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3Xt4XPV97/vPmhlbY2l0sWzL4ItiCMLci5FKdkouNBK1YFMDYTfHGE6S3fZwdmnCk5OWp0m1D2yn+Lhn0/rs7b1p2vSWCzamhMSwE5DBIjSQhBILgfEFRUCMr0i2ZF1G8siamXX+EGOPNLe1ZtbMrBm9X8/T58HST7N+EibVZ37f3/drmKYpAAAAAADcyFPsDQAAAAAAkAqhFQAAAADgWoRWAAAAAIBrEVoBAAAAAK5FaAUAAAAAuBahFQAAAADgWoRWAAAAAIBrEVoBAAAAAK5FaAUAAAAAuBahFQAAAADgWr5ibyCVxYsXm6tWrSr2NgAAAAAAedDd3X3KNM0lmda5NrSuWrVKe/bsKfY2AAAAAAB5YBjG+1bWUR4MAAAAAHAtQisAAAAAwLUIrQAAAAAA1yK0AgAAAABci9AKAAAAAHAtQisAAAAAwLUIrQAAAAAA1yK0AgAAAABci9AKAAAAAHAtQisAAAAAwLUIrQAAAAAA1yK0AgAAAABci9AKAAAAAHAtQisAAAAAwLV8xd5AqYsMBDXZ1afoSEieWr8qWpvkbQgUe1sAAAAAUBYIrVmKDI5r7OEuhbr6pHD0/Cc2vyh/W5OqO1rlXVRVvA0CAAAAQBkgtGYhMjiuobu3K3J4OPGT4ahCnb2aOtCv+m0bCK4AAAAAkAPutGZhbFNX8sAaJ3J4WGObugq0IwAAAAAoT4RWmyIDQYV291laG9rdp8jJYJ53BAAAAADli9Bq0+TsO6zphKOatBhwAQAAAACJCK02RUdCeV0PAAAAADiP0GqTp9af1/UAAAAAgPMIrTZVtDZJPos/Np9HFW1N+d0QAAAAAJQxQqtN3oaA/BaDqL+tSd4lgTzvCAAAAADKF3Nas1Dd0aqpA/1px954G+tU3dE642ORgaAmu/oUHQnJU+tXRWuTvA2EWgAAAABIhdCaBe+iKtVv26CxTV3T42/iuwn7PPK3Nam6o1XeRVWSpMjguMYe7lJodufhzS8mrAUAAAAAnEdozZJ3UZXqtqxLPD2dVRIcGRzX0N3bk5/KhqMKdfZq6kC/6rdtILgCAAAAwCyE1hx5GwKqvGtNys+PbepKW0YsSZHDwxrb1KW6Leuc3h4AAAAAlDQaMeVRZCA4XT5sQWh3nyIng3neEQAAAACUFkJrHk3OvsOaTjiqSYsBFwAAAADmCkJrHkVHQnldDwAAAADljtCaR55af17XAwAAAEC5I7TmUUVrk+S1+CP2eVTR1pTfDQEAAABAiSG05klkcFxjm1+UotbutPpnjcoBAAAAADDyJi/SzmZNwttYp+qO1jzvCgAAAABKDyeteWBlNqskyZD87atVv22DvIuq8r8xAAAAACgxjoRWwzDaDcPoNQzjHcMwvpZizecMwzhgGMZ+wzC2O/FcN7Izm1UeQ9Vf/wyBFQAAAABSyDm0GobhlfSopJslXSHpLsMwrpi1pknS1yXdYJrmlZK+kutz3crWbNaIyWxWAAAAAEjDiTut10t6xzTN9yTJMIwdkm6TdCBuzf8h6VHTNE9LkmmaAw4815UKOZs1MhDUZFefoiMheWr9qmhtkreBZk4AAAAAyocToXW5pCNxfz4q6WOz1lwqSYZh/EySV9J/MU2z04Fnu04us1mthtDI4LjGHu5SaPap7uYX5W9rUnVHKyXHAAAAAMqCE6HVSPIxM8lzmiTdKGmFpJcNw7jKNM0Z3YoMw7hX0r2S1NjY6MDWCs/3G8vsrV+zzFYITduZOBxVqLNXUwf6ae4EAAAAoCw40YjpqKSVcX9eIel4kjVPm6Y5ZZrmryX1ajrEzmCa5rdM02wxTbNlyZIlDmyt8MJvzv7W0zv7yiEN3b1doV29iXdhPwyhQ3dvV2RwXJK1zsSRw8Ma29Rlax8AAAAA4EZOhNZfSmoyDOMiwzDmS1ov6ZlZa3ZK+m1JMgxjsabLhd9z4NmuY/eOauh/HbAcQu10Jg7t7lPkZNDWXgAAAADAbXIOraZphiV9SdIuSQcl/YtpmvsNw/iGYRjrPly2S9KgYRgHJP1E0gOmaQ7m+mw3snunNfyutR9DaHefzuzcZ70zcThKZ2IAAAAAJc+JO60yTfNZSc/O+tiDcf9sSvrqh/9X1ipam6TNL1oLlx5Dis6+/ptCOKqpN+yVHufSmRgAAAAA3MCJ8mDE8TYE5G9LuK6blGfhgrzuxe6pLwAAAAC4DaHVYZHBcZmTYUtro4MTtl573rXLJJ/Ff2U+jyoshmcAAAAAcCtCq4Ni42gmf/Ku8y/u82jBHVdZPsX1tzXJuyRxxisAAAAAlBJCq4OsjKPJViyEVne0yttYl3att7FO1R2tedkHAAAAABQSodUhdsbR2BUfQr2LqlS/bYP87asTS4V9HvnbV6t+2wZ5F1XlZS8AAAAAUEiOdA+GNNnVZ30cjVU+j/xtTdOnq3Eh1LuoSnVb1ikyENRkV5+iIyF5av2qoCQYAAAAQJkhtDrEyfEy8z/+EfnbmjKGUG9DQJV3rXHsuQAAAADgNoRWhzg5Xsbf1kQYBQAAAABxp9UxFa1N1sfRpMOoGgAAAAA4h9DqEG9DwPI4mnQYVQMAAAAA51Ee7KDqjlZNHejPeuxNKY+qSWgK1dokbwPhGwAAAEBuCK0Oio2jGdvUNT3+Jr6bsM+jik9eJBnS5E9/PfNzHkO+jy6S/3evkCJm4Teeg8jguMYe7lJodvfkzS8m7XwMAAAAAHYYpunOkNTS0mLu2bOn2NvIWrpxNJGBoM48s1+hZw4o/N6gFI37d5BizI0bRQbHNXT39rQny97GOubGAgAAAEhgGEa3aZotmdZx0ponacfReA2d+f7e5GEvHFWos1dTB/qzCnuFLNMd29SVsRQ6cnhYY5u6VLdlXV72AAAAAKC8EVqLIB9hr9BlupGB4HQJtAWh3X2KnAzSYAoAAACAbXQPLrBswl7G1/ywTDe0q3dmYJXOndwO3b1dkcHxbLac1OTscJxOOKpJi98zAAAAAMQjtBZYPsKenZNbp0RHQnldDwAAAAASobXgnA57+Ti5tcJT68/regAAAACQCK2F57P3I88U9opVplvR2mT9e/F5VNHW5MhzAQAAAMwtNGIqsKnXj1lfbCHsFaJMN1VHYn9bk0KdvRm/3h837gcAAAAA7CC0FlBkIKjJV35teX3FJy/KGPbyWaabqSNx1X0f19SB/oxzWqs7Wm3tEQAAAABiKA8uIFulvJLmrVmecU2+ynStdCQe/tJO1f3P2+VvX524B59H/vbVWc2aBQAAAIAYTloLyHZproWAm68yXasdicf/5heq27IusYSYkmAAAAAADiC0FlC+SnmrO1odLdPNpiOxtyGgyrvWWPoaAAAAALCK8uACylcpr3dRleq3bXCsTLdYHYkBAAAAYDZOWrOQqptuJvnsuOtdVOVYmW4hOhIDAAAAgBWEVhsyddOt7mjNeJrpdClvwtc6UKabz47EAAAAAGAH5cEWWemmO3T3dkUGx9O+jtOlvPmQrzJmAAAAALCLk1aLrHbTHdvUpbot69Kuc7KUNx/yWcYMAAAAAHYQWi3IqpuuhSDn5o67+S5jBgAAAAArKA+2YC520y2FMmYAAAAA5Y+TVgsK2U03287E+eD2MmYAAAAA5Y/QakEhuuk60Zk4X9xcxgwAAACgvFEebEG+u+k61ZkYAAAAAMoNodWCWDddK7LppmunMzEAAAAAzCWUB1uUr266+epMnC033akFAAAAAEKrRbFuumObuqZDZnwZr8+T9b1Tu52Jx/7yRVX/2WcsBUk7AdTNd2oBAAAAzF2GaZrF3kNSLS0t5p49e4q9jaSc7KYb/NtfKLj1FXtflCEkpwygKb4udqc20ykyI24AAAAAOMUwjG7TNFsyreOkNQtOdtPNptNwrDnT1IH+hCCZNoCm+Do7d2rrtqyzv18AAAAAyBKNmIrMVmfiWZI1Z7Lb1CmbO7UAAAAAUCiE1iKz05k4mfggmU0AtXundtLi6wMAAACAEwitLlB138ezPm2ND5LZBNDoSMjW4+yuBwAAAIBcEFpdYPxvfmE9bCYRC5LZBFC7d2qzuoMLAAAAAFkitBaZnZLeVGJBMpsAautOrc+jihxKmQEAAADALkJrkdkq6U0mLkhmE0Dt3Kn15zDaBwAAAACyQWgtslzviMYHyWwDaHVHq7yNdWnXexvrVN3RmtNeAQAAAMAuQmuR5XJHNFmQzCaAehdVqX7bBvnbVyee1Po88revTpgHCwAAAACFYJimWew9JNXS0mLu2bOn2NvIu8hAUCfb/s5eibDPI39b03RATRIkI4PjGtvUNX1XNv51M3xdbD+TXX3nmjRVUBIMAAAAIA8Mw+g2TbMl0zpfITaD1GIlvaHO3oxrfU2LVbn+2oxB0ruoSnVb1mUVQL0NAVXetcb29wEAAAAA+UBodYHqjlZNHehX5PBwyjXexjot/KfP2SrRJYACAAAAKHXcaXUB7pQCAAAAQHKctLpELiW9AAAAAFCuCK0uM7ukNzIQ1MTjPedDbOv0bFUAAAAAmAsIrS4VGRzX2MNdCnXN6gC8+cWMHYDdIuHUmMANAAAAwCZCqwtFBsc1dPf25I2ZwlGFOns1daDftfdcyyFwAwAAAHAHQqsLjW3qSttJWJIih4c1tqlLdVvWFWhX6cVOVcMnRnXmqbdknj6TuKgEAjcAAAAAdyG0ukxkIKjQ7j5La0O7+xQ5GSxqo6aUp6rpvsZlgRsAAACAezHyxmUmbYQ/haOatBhw8yFWxhza1Wt9zx+KBW4AAAAASIeTVpeJjoTyut5JVsqYU/owcMd3Sk6GZk4AAADA3EZodRlPrT+v651ip4w5lXSBm2ZOAAAAACTKg12norVJ8ln81+LzqKKtKb8bSsFWGXMKqQJ32rLjD5s5Dd29XZHB8ZyeDwAAAMD9CK0u420IyG8xiPrbmorWhCnnsuQ0gdtO92QAAAAA5Y3Q6kLVHa3yNtalXeNtrFN1R2uBdpQo17LkVIE7m+7JAAAAAMoXodWFvIuqVL9tg/ztqxNLhX0e+dtXF33Oqa0y5lnSBe5S6p4MAAAAIP9oxORS3kVVqtuyLrF7bp5Lgq12642VMYc6e62/uM+TsYlSKXVPBgAAAJB/hFaX8zYE0o6FcWokTDbdeqs7WjV1oD/t/VNP/QL5P3u1fBfWWArcpdI9GQAAAEBhGKZpFnsPSbW0tJh79uwp9jZcK2XItHCamey1hu7enjZ8ehvrkpYkRwbHNbapa/oeao77kKZD+Mm2v7NWIuzzaEnX/1m0ZlQAAAAAsmcYRrdpmi2Z1nHSWoLShswPR8JMHei3fO/VTrfeui3rZnw8mzLmdKfDdsqOi9k9GQAAAEBhEFpLUC4hM2FdFt16kwXFTGXMkvUSZCtlx8XungwAAACgMAitLjf7VNL3G8scCZkx2XTrzRROZ4sMBHXmmf0a/8fXZCZrnJTkdLh+2wZHy44BAAAAlCZCq0ulPJX0GFLU4j1kCyEzn916U34PqdbHnQ4Xq3syAAAAAHchtLpQ2jurVgNrbHmGkJmvbr1WmjslM/t02FLZsUMdlAEAAAC4D6HVhazcWbUqU8isaG2S/p8XpYi1br0VbU2Wnpv192CjBDmbMT0AAAAASguh1WXsNEbKKEPIjAyOa2zzi1LU2p1Wq916c/0erJQgO91BGQAAAIA7eYq9AcxkqzFSBulCZiz0hXb1ShYqju106831e7BSgmyngzIAAACA0kVodRm7jZFSyRQyLZfvGpK/fbWtE8ucvgcLJcjZjOkBAAAAUJooD3YZu42REroJWxgJM9U7MH3CavH1q7/+GXslth7D+tpZKj5xkSZ3p2+qVIgxPQAAAADcgdDqMhWtTdLmF62FMp9H9U/co/Abxy2PhIkMjuv0H/yLpZLg6S8wCxb6jMp5mnz515p86d3zH0zSVCmfY3oAAAAAuAuh1WW8DQH525oU6sx8Eupva9L8y5dq/uVLLb/+2KYuRYfO2NqT7dBncyyPDMlYME/mxFTi55I0VcrXmB4AAAAA7sOdVheq7miVt7Eu7Ro7jZFisu3qm++Q6LtkcfLAGie+qVJFa5Pks/hX18aYHgAAAADuQ2h1Ie+iKtVv2yB/++rEcObz2G6MFJNVV98sQp+tUOk1FH5vyNLSWFOl2Gm0FVbH9AAAAABwJ8qDXcq7qEp1W9YpMhDUZFef5Tur6WRztzOb0GenxNm3eonCBwasvXBcU6XqjlZNHehP2wE5m9NoAAAAAO5CaHU5b0MgoQlSQpBN0mE3Gbtlu8bCBVmHPquhcv5vrbIeWnU+eMdOo8c2dU2XPMefIFvooAwAAACgNBBaS0hkcFxjD3cpNLvMN0mH3WRsdSY2pIX/9LmsQ5/VUDn5/K9svW588M7HaTQAAAAAdyG0lojI4LiG7t6e/OQySYfdZGx1Jl67WvNXN+S0Zyuh0u6In2T3a5OdRgMAAAAoD4TWEjG2qSttqa10vsNu3ZZ1KdcU4y5oulBpd8SP3RPUbEupAQAAALgDobUE2BlVc67Dbopw58a7oPkI0rmWUgMAAABwB0JrCbA1qiauw24qbrsL6nSQdqKUGgAAAIA7EFpLgN1RNVbXu+kuqJNB2qlSagAAAADFR2gtAXZH1dhd7ya5BmknS6kBAAAAFJ+n2BtAZhWtTZLP4r+qFB1254psSqkBAAAAuBehtQTEOuxakU2H3XKSr1JqAAAAAMXhSGg1DKPdMIxewzDeMQzja2nW/QfDMEzDMFqceO5cUt3RKm9jXdo1To+qKUVzqZQaAAAAmAtyDq2GYXglPSrpZklXSLrLMIwrkqyrlnS/pH/L9ZlzUazDrr99dWKpsM8jf/tquuGKUmoAAACg3DjRiOl6Se+YpvmeJBmGsUPSbZIOzFr3F5L+q6Q/deCZc5LbRtW4UayUOtTZm3HtXC+lBgAAAEqBE6F1uaQjcX8+Kulj8QsMw1gjaaVpmj8yDIPQalNCSG1tcs2oGjeq7mjV1IH+tGNvKKUGAAAASoMTodVI8jHz3CcNwyPp/5P0xYwvZBj3SrpXkhobGx3YWmmLDI5r7OEuhWZ3xN38ovxtTdP3XOd4OXAysVLqsU1d0+Nv4n92Pg8/OwAAAKCEGKZpZl6V7gUM4+OS/otpmms//PPXJck0zc0f/rlW0ruSgh9+yQWShiStM01zT6rXbWlpMffsSfnpshcZHNfQ3dsznhZyjzU9SqkBAAAAdzIMo9s0zYxNep04af2lpCbDMC6SdEzSekkbYp80TXNE0uK4jb0k6U/TBVZIY5u60gZWSYocHtbYpi7VbVlXoF2VHm9DgFJqAAAAoITlHFpN0wwbhvElSbskeSX9k2ma+w3D+IakPaZpPpPrM+aayEBwuqzVgtDuPkVOBjk9LKBkd4y9Dfz8AQAAgHxw4qRVpmk+K+nZWR97MMXaG514ZjmbnH2HNZ1wVJO7+zhNLADuGAMAAACF50hohbOiI6G8rod9ae8Yh6MKdfZq6kA/d4wBAAAAh3mKvQEk8tT687oe9tm5YwwAAADAOYRWF6pobZJ8Fv/V+DyqaGvK74bmuGzuGAMAAABwBqHVhbwNAfktBlE/I1zyLps7xgAAAACcQWh1qeqOVnkb69Ku8TbWqbqjtUA7mru4YwwAAAAUD6HVpbyLqlS/bYP87asTS4V9HvnbV9P0p0C4YwwAAAAUD92DXcy7qEp1W9YlzgWlJLigKlqbpM0vWisR5o4xAAAA4ChCawnwNgSYw1pEsTvGoc7ejGu5YwwAAAA4i/JgwALuGAMAAADFQWgFLOCOMQAAAFAclAcDFnHHGAAAACg8QitgE3eMAQAAgMKhPBgAAAAA4FqEVgAAAACAaxFaAQAAAACuRWgFAAAAALgWoRUAAAAA4FqEVgAAAACAaxFaAQAAAACuRWgFAAAAALgWoRUAAAAA4FqEVgAAAACAaxFaAQAAAACu5Sv2BlBeIgNBTXb1KToSkqfWr4rWJnkbAsXeFgAAAIASRWiFIyKD4xp7uEuhrj4pHD3/ic0vyt/WpOqOVnkXVRVvgwAAAABKEqEVOYsMjmvo7u2KHB5O/GQ4qlBnr6YO9Kt+2waCKwAAAABbuNOKnI1t6koeWONEDg9rbFNXgXYEAAAAoFwQWpGTyEBQod19ltaGdvcpcjKY5x0BAAAAKCeEVuRkcvYd1nTCUU1aDLgAAAAAIBFakaPoSCiv6wEAAADMbTRiQk48tf68rpcYowMAAADMZYRW5KSitUna/KK1EmGfRxVtTZZfu5BjdAjGAAAAgDsRWpETb0NA/rYmhTp7M671tzXJu8RaECzUGB3mywIAAADuxp1W5Ky6o1Xexrq0a7yNdaruaLX8moUYoxMLxqFdvYknxR8G46G7tysyOJ71MwAAAADkhtCKnHkXVal+2wb521dLvll/pXwe+dtX2zoRzWWMTmQgqInHexT8219o4vEeRQZSj9hhviwAAADgfpQHwxHeRVWq27Iu8W6ojZLgmGzG6FT8zqW2ynyzCcZ2vw8AAAAAuSO0wlHehoAq71pz7s/DE/16o+8HGp8cVlVFna5dvlZ1lUvTvobdsTjhD0Y1bvP+azbBOP77AgAAAFAYhFbkxWjolHbseVA9R3cpaobPffyJ7o1as7Jd65s3qsa/OOnX2h2Lc/ZnhyyX+dZtWSeJ+bIAAABAqeBOKxw3GjqlR164U91HfjwjsEpS1Ayr+/CP9MgLd2o0dCrp11e0NiXejU3FMBQ+OGBpafz910LMlwUAAACQO0IrHLej+yENBA+lXTMQPKQd3Q8l/VxsjI4lpimZFjf2YZmvZDMY25wvWyx2mlABAAAApYLyYDhqeKJfPUc6La3tOdKpkTP9ql2QeMe1uqNVUwf6M5b92hUr883XfNl8SWhw1dokb8P0npg1CwAAgHJGaIWj3ji2K6EkOJWoGVbP0V26senzCZ+LjdEZ29Q13eXXatOkDOLLfK0EY7vzZZ2WKZBW3fdxDX9pp60mVAAAAEApIbTCUeOT9k5GJ86OJHws/lRx/m+uVOUffkxnX/m1gltfkaKJtcCjgaDeXv1rnVkQ0oIzfl3We5FqgklORj2GwsdHNfF4z7mTypTB2Ocp+illZHBcQxm6Ik/+9D2ZE1PpX2dWEyoAAACglBBa4aiqijpb6yvn157755Snij6PfJcuSQiswcoJPXvzT3Vw9XuKes+vf27ty7r87Yt1S+enFJioPP8FUVMT//ja9D/Hlc46NV/WaWObujKWR2cKrDHMmgUAAECpohETHHXt8rXyGNbeC/EYPq1ZsVbS+VPF0K7exFLgcFThA/0zPhSsnNA/fvEp7b/inRmBVZKi3qj2X/mO/vGLTylYOZH84R+eVA7dvV2RwfFz82UD/+njqrxrTdHDXWQgOH3665S4JlQAAABAKSG0wlF1lUu1ZmW7pbVrVrafa8Jk5VQx3rPtP9XQosTS4nhDi0b0bPtP066Jlc66zeTs02YHMGsWAAAApYjQCsetb96ohsCqtGsaAqu0vnmjJPuniqOBoA5e9p6ltQcve09jgfG0a+Lnt7pFPgIms2YBAABQigitsGR4ol8v9X1XP963VS/1fVfDE/0p19b4F+uBm55Sc+OtCaXCHsOn5sZb9cBNT6lq1K+Jx3s0+l+et3Wq+PbqXyeUBKcS9UZ1cHWGgOvC0lnHA2aJzJoFAAAAZqMRE9IaDZ3Sjj0PqufozFE2T3Rv1JqV7VrfvFE1/sUJX1fjX6x7b3hUwxP9euPYLk2cHVHl/FqtWbFWgYmAxr7epZNZlsCeWWDvFPLMgsmMa9xWOlvR2iRtftGxEmE3zJoFAAAAskFoRUqjoVN65IU7NRA8lPC5qBlW9+Ef6cjQPj1w01NJg6s0fcc1fg5r2jEuFi04Y+8UcsGZioxr3FY6620IyN/WpFBnb8a1RuW8tF2Eiz1rFgAAAMgF5cFIaUf3Q0kDa7yB4CHt6H7I8mvabbiUzGW9F8kTsfZX1xPx6PLei9MvcmnpbHVHq7yN6UcIeRvrVL/jbvnbV0u+WT8Tn0f+9tWq37ahaLNmAQAAgFxx0oqkhif61XOk09LaniOdGjnTf64TcCpOjXGpCQZ0+dsXa/+V72Rce/nbF6s6mD6wubV01ruoSvXbNmhsU9f0z23W7NrYnFnvoirXzpoFAAAAckVoRVJvHJt5hzWdqBlWz9FdM8qAk3FyjMstnZ/SiQtOph17Uz9Yq1s6P5X2ddxeOmsnkMZmzQIAAADlhNCKpMYn7ZXwTpxNPzNVcrbZUWCiUn/wnTv17Nqf6uBl783oJuyJeHT52xfrls5PKTBRmfZ1fB9d5Nie8olACgAAgLmK0IqkqirS36WcrXJ+bcY1Tjc7CoxX6nM/aNdoIKi3V/9aZxZMasGZCl3em7kkOGbyJ+9q6O7tSe99JpxutjbJ20C5LQAAAFBIhmmaxd5DUi0tLeaePXuKvY05a3iiX19/5rcslQh7DJ/+8rafW7rTerLt7xwrEXaSv3216raskzTd4Xjs4S6FZpczz7pHCgAAACB7hmF0m6bZkmkd3YORVF3lUq1Z2W5p7ZqV7RkDq3R+jIsbhXb3KXIyeG4kT2hXb2K4DkcV6uydHtkzOF6cjQIAAABzDKEVKa1v3qiGwKq0axoCq7S+eaPl17QyxqUowlFN7u6zNJIncnhYY5u6CrQxAAAAYG4jtCKlGv9iPXDTU2puvFUeY+b1Z4/hU3PjrXrgpqdU419s+TVjY1xSzRWt+O2PSl7Die3bFj42YnkkT+xkFgAAAEB+0YgJadX4F+veGx7V8ES/3ji2SxNnR1Q5v1ZrVqy1VBKcTKYxLsNffUahzt7ML2RIcvBKdvTEqPX7th+ezNLRFwAAAMgvQissqatcmnEOq12pxrhUd7Rq6kB/2jJdb2OdfJcs0uSL7zoChMBlAAAgAElEQVSzGZ9HnmWZOyDHc3KEDwAAAIDkKA+G62QqIfa3r1b9tg2q2bg24/1Yo3KepWf625rkW1Zja59Oj/ABAAAAkIiTVhRNujmomUqIY+q3bdDYpq7pu6hJxtNU3fdxDX9pZ8ZT2+qOViliSptftFYi7POowqWdkAEAAIBywpxWFFw+5qCmC7eRwfG0wTb+eVbv08bPdQUAAABgn9U5rYRWFFRsDmqmk8/6bRtsB9eMz85walvs/QEAAABzidXQyp1WFFQx56DGGj+FP3+xXmt5S539/6SX+r6r4Yn+82ss3qclsAIAAACFwZ1WFExkIGh7Dursk9BcjIZOaceeB9VzdJeiZvjcx5/o3qg1K9u1vnmjavyLLd+nBQAAAJB/hFYUzOTsO6zpODwHdTR0So+8cKcGgocSPhc1w+o+/CMdGdqnB256SjX+xZJSj+QBAAAAUDiUB6Ng7M41dXIO6o7uh5IG1ngDwUPa0f2QY88EAAAAkDtCKwrG7lxTp+agDk/0q+dIp6W1PUc6NXKmP/NCAAAAAAVBaEXBVLQ2JTY3SsXBOahvHJt5hzWdqBlWz9FdjjwXAAAAQO4IrSgYb0NAfotB1O9g06PxyfTdimebODviyHMBAAAA5I7QioKq7miVt7Eu7RpvY52qO1ode2ZVRfrnzVY5v9axZwMAAADIDaEVBVWMOajXLl8rj2GtUbbH8GnNirUZ10UGgpp4vEfBv/2FJh7vUWQgmOs2AQAAACTByBsUXKHnoNZVLtWale3qPvyjjGvXrGxX7YKlKT8fGRzX2MNdCs0e37P5RfnbmqZPkh0M3AAAAMBcR2hF0RRyDur65o06MrQv7dibhsAqrW/emPLzkcFxDd29XZHDSe7IhqMKdfZq6kC/4yfFAAAAwFxGeTDmhBr/Yj1w01Nqbrw1oVTYY/jU3HirHrjpKdX4F6d8jbFNXckDa5zI4WGNbepyZM8AAAAAOGnFHFLjX6x7b3hUwxP9euPYLk2cHVHl/FqtWbE2bUmwNH2HNbS7z9JzQrv7FDkZzEupMwAAADDXEFox59RVLtWNTZ+39TWTs++wphOOanJ3X8FKnwEAAIByRnkwYEF0JJTX9QAAAACSI7QCFnhq/XldDwAAACA5QitgQUVrU+Jc2VR8HlW0NeV3QwAAAMAcwZ1W4EMJc2Nbm+RtmG6m5G0IyN/WpFBnb8bX8edp3iwAAAAwFxFaUXJi3X/HJ4dVVVGna5evVV1l+u6/6UQGxzX2cJdCs5stbX5R/rYmVXe0yruoStUdrZo60J927I23sU7VHa1Z7wUAAADATIZpmsXeQ1ItLS3mnj17ir0NuMho6JR27HlQPUd3KWqGz33cY/i0ZmW71jdvTDtnNZnI4LiG7t6eMYjWb9sg76Kq6YC7qWt6/E18wPV5ZgRcAAAAAOkZhtFtmmZLxnWEVhSD3dPS0dApPfLCnRoIHkq5piGwSg/c9JSt4Dr81Weslfy2r1bdlnXn/pxQSkxJMAAAAGCL1dBKeTAKKtVp6RPdG9Oelu7ofihtYJWkgeAh7eh+SPfe8KilvUQGgtMnphaEdvcpcjJ4Lph6GwLMYQUAAAAKgO7BKJjYaWn3kR/PCKySFDXD6j78Iz3ywp0aDZ2a8bnhiX71HOm09IyeI50aOdNvae3k7Dus6YSjmrQYcAEAAAA4h9CKgrFzWhrvjWO7EkJuKlEzrJ6juxI+HhkIauLxHgX/9heaeLxHkYGgoiMhy3uXZHs9AAAAgNxRHoyCyOa0tHbB9B3X8cnUTZKSmTg7cu6f03UG9l26xNbremr9ttYDAAAAyB0nrSiIXE5LqyrqbD2rcn6tpPOdgUO7ehPLgMNRhQ9YKyOWJPk8qmhrsrUPAAAAALkjtKIghsaP21o/sudtRQaCkqRrl6+Vx7BWFOAxfFqzYq0kaWxTV9pRNnb46Q4MAAAAFIUjodUwjHbDMHoNw3jHMIyvJfn8Vw3DOGAYxl7DMLoMw/iIE89F6Tj4wcu21hvPHtXJtr/T8FefUfWZgNasbLf0dWtWtqt2wVJbnYEz8SyvUXVHqyOvBQAAAMCenEOrYRheSY9KulnSFZLuMgzjilnLeiS1mKZ5jaTvS/qvuT4XpWN4ol9Hhw9aXm9EDF3ee7EUjirU2auhu7frcxf9mRoCq9J+XUNgldY3b5RkszNwpv0YhiOvAwAAAMA+J05ar5f0jmma75mmeVbSDkm3xS8wTfMnpmlOfPjHVyWtcOC5KBHT91kjltdf0L9Y1cGqc3+OHB6W/uoNPXDTU2puvDWhVNhj+NTceKseuOmpczNenez0Gzk6orFNXY69HgAAAADrnOgevFzSkbg/H5X0sTTr/0DScw48FyXCbvffj763MuFjod19WvL1z+jeGx7V8ES/3ji2SxNnR1Q5v1ZrVqw912k4xulOv6HdfYqcDHKvFQAAACgwJ0JrstpJM+lCw7hHUoukT6f4/L2S7pWkxsZGB7YGN7Db/bd2tDrxg+GoJnf3qfKuNaqrXKobmz6f9jUqWpukzS86ViIc/3wAAAAAheNEefBRSfFHYyskJbSKNQyjTVKHpHWmaU4meyHTNL9lmmaLaZotS5bYm6EJ97LV/Tfimb7PmoSdkl9vQ0B+h0fUOFlyDAAAAMAaJ0LrLyU1GYZxkWEY8yWtl/RM/ALDMNZI+jtNB9YBB56JElJXudRy99/L3754xn3WeHZLfqs7WuVttHfKm47TJccAAAAAMss5tJqmGZb0JUm7JB2U9C+mae43DOMbhmGs+3DZI5ICkp40DOMNwzCeSfFyKFPrmzdm7P5bP1irWzo/lfyTPo8qbJ6cehdVqX7bBvnbV0u+WX/VfR5V3PhRyWvxP4Esng8AAAAgd4ZpJr1+WnQtLS3mnj17ir0NOGg0dEo7uh9Sz5FORc3wuY97Ih5d/vbFuqXzUwpMVCb9Wn/7atVtWZf0c1ZEBoKa7OpTdCQkT61fFW1N8i4JaPirzyjU2Zvx63N9PgAAAICZDMPoNk2zJeM6QisKLb77r//sAq36xqgqe1OPxPEur1X9jrvlXZS8bDgXkcFxDd29fXqsTqrnN9apftuGnJ6fEJpbm+RtoBMxAAAA5i5CK0pGZHBcY5u6FHqhT4ok6fbrNeS/6dLpO6p5Cq5jm7oU2t03s9uwzyN/W1NOz40Mjmvs4S6Fupx/bQAAAKCUEVpRUiKD4xr83x5T9PhoyjVOnHim3UOKEuKsX69Ap7gAAABAKbIaWp3oHgzkbGxTV9rAKkmRw8Ma29SVtz14GwKqvGuNAv/p46q8a01OgVWa/p7SBVYp/98TAAAAUOqsDc8EHBA+fVzB159WZHxI3qp6Ba67Tb6FyxQZCE6X5loQ2t2nyMlgzoEy38rxewIAAACKgdCKvAuPDmjge19W8PWdUuR81+CB7V9RoPkOVfvvm3nfM+2LRTW5u0+Vd63J026dMTn7Dms6JfI9AQAAAMVAaEVehUcHdGTTJzXV/07iJyNhBV97UpERU/OUsZT9nOhIyMEd5ofdPZbC9wQAAAAUA3dakVcDj92fPLDGCYeO2npNT60/ly0VhN09lsL3BAAAABQDoRV5Ez59XMHuH2Zet3C/TCP1nNYZfB5VtDXluLP8q2htknwW//Mqke8JAAAAKAZCK/Im+PrTM+6wpmLOH1N44T5Lr+nPcQxNoXgbAvJbDKKl8j0BAAAAxUBoRd5Exocsrw195BlpUfqZwd7GOlV3tOa6rYKp7miVt7Eu7ZpS+54AAACAQiO0Im+8VfWW15rzxlXxJ1Xyt69OLKv1eeRvX636bRvkXVTl8C6dFxkIauLxHp15cq8W/IdrVHHjR0v+ewIAAACKhe7ByJvAdbdpYPtXLJUIy+tT9Y2fle/2CxUZCGqyq0/RkZA8tX5VlEj5bGRwXGMPdyk0e9yNz6OKT16keWuWS+FoSX1PAAAAQLERWpE3voXLFGi+Q8HXnsy4NtB8h3x1F0qavg9aajNLI4PjGrp7uyKHhxM/GY5q8ifvKvzuICerAAAAgE2UByOvGu7ZqnlLL0m7Zt7SS9Rwz9YC7Sg/xjZ1JQ+scSKHhzW2qatAOwIAAADKA6EVeeWradDKjpcVuP73JO+sg32vT4Hrf08rO16Wr6ahOBt0QGQgqNDuPktrQ7v7FDkZzPOOAAAACmtkJKSfv3JIXc/36eevHNLISKjYW0IZoTwYeeeradCy+3ZMz219/WlFxk/LW7VQgebbz5UE59v5Zw/JW1WvwHW3ybdwmSOvPTn7DmvajUQ1ubuv5MqfAQAAkgmOTWrnU/u0760PFI2enwTxzA/366prLtDtn71KgeqKIu4Q5YDQioLxLVymutY/Kugzw6MDGvjelxV8feeMhlAD27+iQPMdarhna86nvFGb7yTaXQ8AAOBGwbFJPbr1Zxo8NZHwuWjU1N43TujY0RH98f03EFyRE8qDUbbCowM6sumTCv7y+4kdjCNhBV97Ukc2fVLh0YGcnuOp9ed1PQAAgBvt/MG+pIE13uCpCe38wb4C7QjlitCKsjXw2P2a6n8n7Zqp/nc08Nj9OT2norUpcQ5rKj6PKtqacnoeAAASdwhRXCMjIe3b+4Gltfv2fqBR/n4iB5QHoyyFTx9XsPuHltYGu3+o8PCJrO/XehsCmv/pRp3tOpRx7fxPNzKfFQCQE+4Qwg32z/r7l040amrfWx/otz6xKr+bQtnipBVlKfj604klwalEwgp278zpeaGPPK1Ixan0j6k4pdBHns7pOQCAuS12h3DvmycSAkPsDuGjW3+m4NhkkXaIueLMxJS99WfsrQfiEVpRliLjQzbXn876WeHTxxU8+KQmrvimpurflGlEZnzeNCKaqn9TE1d8U8GDTyo8fCLrZwEA5jbuEMItFlTOs7d+gb31QDzKg1GWvFX1NtcvzPpZsVNdc15YZy55XMbZavlOXykjskCm94zCC/fLnD82vTgiBbt3FryLMgCg9GVzh7CG5n+uMjIS0v63PtCZiSktqJynK6++QLUl+u/oyqsv0DM/3G+pRNjjMXTV1RcUYFcoV4RWlKXAdbdpYPtXrJUIe30KNN+e9bNmn+qa88c0tfTVNOuzP9UFAMxd3CEsXeV4D7m21q+rrrlAe9/IXEF21TUX8AZKgZXTGyQSoRVlyrdwmQLNdyj42pMZ1waa78i6CZNU2FNdAMDcxR3C0lTOs0xv/+xVOnZ0JG3J+qLFlbr9s1cVcFdzWzm+QSJxpxVlrOGerZq39JK0a+YtvUQN92zN6TmB626TvBbf/8nxVBcAMHdxh7A0lfM95EB1hf74/ht0zbUXyuMxZnzO4zF0zbUXlmQYt8ptY6fKuVEbJ60oW76aBq3seFkDj90/Pf4mvlTY61Og+Q413LNVvpqG3J5TwFNdAMDcxR3C0jMX7iEHqit0zxeaz5ejnpnSggXzdNXV5VsS7NbTTDtvkNzzheYC7coZhFaUNV9Ng5bdt2O6w+/rTysyflreqoUKNN/uaHhsuGerJt/v0VT/OynXOHGqCwCYu7hDWHrm0j3k2lp/ye7dqpGRkF7/5VH960/e1USScv1ilnuX+xskhFbMCb6Fy/LasbdQp7oAgLmNO4SlhXvI5SHVyWoqxTjNLPc3SAitgEMKdaqbzvlnD8lbVa/AdbfJt3BZQZ4NAMi/2B3CnT/Yp317Z/6S6vEYJd1oJZ1sOqG6oXsq95BLX7pGWukU+jSz3N8gIbQCDsv3qW4y4dEBDXzvywq+vnPGKe/A9q9wygsAZWYu3SHM5u6gm+4bcg+5sPLxRoWVe6LJFPo0s9zfICG0AiUuPDqgI5s+mfw+bSSs4GtPavL9Hq3seJngCgAlKNUv4uV+hzCbUTFuGy/DPeTCyNcbFXbuiSZTyNPMcn+DhJE3QIkbeOz+tA2gJGmq/x0NPHZ/gXYEAHBCcGxSj327W5u/0aWdT+3Trud6tfOpfdr8jS499p3ukhxbYUc2o2LcOF7m9s9epUWLK9Ou4R5y9vI55sXOPdFkCnmaGXuDxIpSfIOE0ApYNDzRr5f6vqsf79uql/q+q+GJ/mJvafoOa/cPLa0Ndv9Q4eHM7/QCAIqvnOctWpFNJ9RsvqYQ5vos03zL5xsVdu+JxivGaWY5v0FCeTCQwWjolHbseVA9R3cpap6/L/pE90atWdmu9c0bVeNfXJS9BV9/eman4nQiYQW7dxb8vi0AwL5s5y26ofmQE7LphBr7ZztfU6jy6rl0D7mQ8j3mxe490XjFOM0s50ZthFYgjdHQKT3ywp0aCB5K+FzUDKv78I90ZGifHrjpqaIE18j4kM31p/O0EwCAU7L5RdzjMVzTfMgJWXVCtVnFGbtvWMigX+73kAst32Ne7NwTjVfM08xyfYOE0AqksaP7oaSBNd5A8JB2dD+ke294tDCbiuOtqre5fmGedgIAcIrdX8S79xzVa68edk3zIScUohOqxzD02Le7yyboz0X5HvNip5GW5K7TzHJ7g4Q7rUAKwxP96jnSaWltz5FOjZwp/B3XwHW3SV6L7z15fQo0357fDQEAcnZ6yN54jdf3HHVd86FcXXn1BQn3P1OJ3R208zWGIb36i/fn7J3hclGINzes3BNdUDlPN996mf78wVbd84XmogfWckRoBVJ449jMO6zpRM2weo7uyvOOEvkWLlOg+Q5LawPNd8hXd2GedwQAyFasW/BPX3rP1tcN9ActrStk86FcZdMJ1c7X1NT6dXroTNo1pRb082lkJKSfv3JIXc/36eevHNKIS/4eZfPmhl1WGmk98LUb9dutl5R0+a3bUR4MpDA+OWxr/cTZkTztJL2Ge7Zq8v2etGNv5i29RA33bC3grgCg9BXyrmO6+aLpGIZkWrxuV8jmQ0787G7/7FU6dnQk7c9k9t1BK1+zcKFfIyPWTlCzad5TTvI1/9QphZqDW673REsJoRVIoaqiztb6yvm1edpJer6aBq3seFkDj90/Pf4mvpuw16dA8x1quGerfDUNRdkfAJSaYvyibqVbcDJLl1brgw/GLK+3e6fPLid/dpGoqes/1qie7mPq7x+bEc5T3R200j11+YpaPfejty3todBdht0k3Rspbrornc2bG9kqt3uipYTQCqRw7fK1eqJ7o6USYY/h05oVawuwq+R8NQ1adt+O6bmtrz+tyPhpeasWKtB8OyXBAGBDMX5Rt9MtON6ixZVa07xcz/3YWgCTsrvTZ5VTP7tUwdcwpIalAV3XskLNLStSnnBlOhXrer7P1veVKeiXy5ih2bIdu1Ro5TzmBecRWoEU6iqXas3KdnUf/lHGtWtWtqt2wdIC7Co938JlzGEFgBwU4xd1O92CpenwdvVvXKjbP3uVIlFTu57rtfT12d7ps8qJn1264GuaUv8HQb326mH95vUrM+4n1amYU8173F46a1Wy0C0pr/NPnUb5bvkjtAJprG/eqCND+9KOvWkIrNL65o2F21QBDE/0641juzQ+Oayqijpdu3yt6iqLH8oBIJ+ymY/qxC/Edsd2fPq3P6pbfvdySdPBqbq6wlJjnFzu9EnpTxSz/dnNfs3etwfy/qaBndmbqYJ+qZTOppMudF+wrDqv80/zhfLd8kVoBdKo8S/WAzc9pR3dD6nnSOeMUmGP4dOale1a37xR0WhEL/V9t+RD3mjolHbseVA9R2d2Tn6ie+O577XGv7iIOwSA/LE7H9WpX9TtnvzVLVwg6XxwshJYc7nTZ+VEMZvZsseOjCS8plV73zihE22junB5je2vtdO854Jl1frlvx1JCOmlUjqbSqbQffzoqK3Xy/ddaYDQCmRQ41+se2949Nzp48TZEVXOr9WaFWs1GhrS1p98XkeHD8pU9NzXlGLIGw2d0iMv3Jn0VDlqhtV9+Ec6MrRPD9z0VMl8TwCKq9Tu+tk98XTqF/VsT/6sNm+qrfNnfeJn9UTx6mvs9U946cV3bf+8Z/vWN1/Vn/zZp7P6vqw075Gk40dHzwW4WEhvbbukpEpnk8m28Vcq+bwrDUiEVpSh882IhuStqlfgutvkW7gs59etq1yqG5s+L2k64H3vtT/T3mO7k64txZC3o/uhtGXQkjQQPKQd3Q/p3hseLcymAJSkUr3r59RdR7uyGdthpxx3bHQyq9NMyfqJ4sGD/bZeN9fAKknj42ezPslM17wnlVhIf7fvVEmWzsZk2/grlXzflQYkQivKSHh0QAPf+7KCr++cMfZlYPtXHB37ku5EcrZ8hzyn7p4OT/Sr50inpbU9Rzo1cqbfFY2nALhPKd/1c+KuY7bsju0oRCmznXDTfyJo67WdkstJZrLmPfv2ntCxDKWx4+PFOZF3it3GX5nkelcasILQirIQHh3QkU2f1FT/O4mfjIQVfO1JTb7fo5UdL+ccXK2cSMbLR8hz+u7pG8d2WRrtI02fIvcc3XXu1BkA4pXyXT87J56rL1/i6C/qVsZ2tLZdor1vntCZiSkdfv+0rddPFZzSlXA7HW7ywYmTzFjznpGRkF7o/JVzm/uQ20pnnTjljnFq/imQCaEVZWHgsfuTB9Y4U/3vaOCx+7Xsvh1ZP8fOiWSM0yEvH3dPxyeHbe1h4uyIrfUA5ganuu8W8y6s1buOvQdP6rHvdDta6pxqbMdFF9Wr64U+/fctr2QdImcHJysl3P0fjOX0/RSK3ZPMVH+/8hHS3Vg6a7cMfvmKGp04Psb8UxQVoRUlL3z6uILdP7S0Ntj9Q4WHT8hXZ69hRIydE8l4ToY8q3dPH3vta7rvU/9g6TWrKups7aFyfq2t9QDmhlxLVt1wFzb+xPOtN0/ITPHt5LPUOX5sR7pya6tmByerJdyTIfv//64YrJ5kZvr7VV9f6fje3Fg6a7cM/j/+4fUyJeafoqgIrSh5wdefnnGHNa1IWMHunapr/aOsnmX3RDLGqZBn56T3zWMv6OjwQa2ouzzhc7ObVV11xW/JY/gsBXKP4dPFi5rLYsQPAGfl0n33xLERfeubrya9L5gqIObrRDZ24vnP//BLHdyfvsFQPkudR0ZC+ud/eC3nLq/xwWlkJKRvW3hNJzvL5pPVk0wrQb2qar6tZ1dVzdf4+NmUn3dr6Ww2jb8kuaqZFOYeQitKXmR8yOb61PeAQode19CzjygSPCVvYLHqb3lA/lXXnfu83RNJ6cN5rivW2v66ZOye9H771T/Vf27/8bk/p2pWJa9Pl3/qSu2fP5jxNWv9S7T5+XXMcQVcpBDltFaekU333djp1943M/8CHQuIt3/2qryfyI6MhNR7cMDSWqfHmqQ6EcxGLDjFXvOtvalPj0vRZVc0WPq5W7lrnS6AzubxGLr3j/6dunb3pbyD7ObSWbuNv4BiI7Si5Hmr6m2uX5jwscljB3Tsr25W+PTRGR8PvvYv8tWv0PI/eU4Vy6/QtcvX6onujbaC45UX3qieo7l3+JXsn/QePX3gXBOoTM2qPvWzt3T8t5brdEXq32a8hk+nzyT+YlmKI36AclCIclo7z7BbdnjRxfW2S1/37f1ARw4P6/TQmYTPOVmym+/uvCMjIe157YgOH5p+I7Vx1UK1XL9S48Gz+vtvvmorQKUyf75XX/z935SknEuM3erE8VEFxybT/rt2esSLJPl8HlXXJL+DXAqls1Yaf7k5dGPuMUyXvt3W0tJi7tmzp9jbQAkInz6u9/70Imslwl6fLv7rQzPutE4eO6D3H7xOiqQpa/PO00e+8boqll+hb/3sj9V9+EeW9lbhq9RUZFJRM3LuYx7Dl/Wp5Et939Xje/5vW19zV8tf6Mamz+v436xX8LUn066dmO/RT2+4WgcrRmYEc4/hU+2CJTo9kfkkpLnxVua4AgVg5a7jwvoF+ncf/4iiUTOrE1grz1i0uHJGQHzsO92Wyg6vuXb6f4etrM3GNddeODNQ2DyF7nq+T7ue67X8vLW3rFbrTU0Z1wXHJvX9HW/qwAFrp7i5yvfP2Q1i/65T+fkrh7TzqX2WX8/rNRSJZP79ONNzS0Uphm6UD8Mwuk3TbMm0jpNWlDzfwmUKNN+RMZBJUqD5joQmTMf++ub0gVWSIlM69tc36+It7+vmK76k3v6fKziZvix5vneBJsNJ7s7kcCp57fK12rHnIZmKWv6aibMjlptVVZ6Nqv2n+7Vh0y+1b+wNTZwdUeX8Wl28qFmbn19n6XnMcQWsybWk10q54+mhM3rux2+f+7PdE9hsxtdYLTv8TFuTtm55OeMesvXWmyf0z3//mnrfPpnVKXQ2pc6ZBMcm9T/+2ytJT4nzZd/eD+TWAwqnZCrPtnvX2kpgtfLcUhHf+AtwK0IrykLDPVs1+X5P2rE385ZeooZ7ts74WOjQ6woPHU3xFTONBo/rm89v0N6hf0tTHmxoWe2lqluwVAc++Gna1xsIHtKO7od07w2PaniiX28cy1xCXFe5VCsXXqHDp62/Y1w5v9Z2syrf/p/pxrhmVS/1fZc5roBDnCjpzbbccXb5bCRqpgzOx4+NWj6di//l3WrZ4d43T+R1BqhpSgeTnGZaLSG2W+pspRnQzh/sK2hgleT6OatOyFSebfcNCKeeC8A5hFaUBV9Ng1Z2vKyBx+6fPlGc1WQo0HyHGu7ZKl9Nw4yvG3r2EUuvPzHfo8evX6LhwZ9lWGnqg9F3dHzE2nDyniPP6dF//X3tO/GvlhsbfeFjf6W/6Gy39PqxJlDhg9ZG38TMblbFHFfAGVZHjWS6j5nrPMnBUxP671te1tjoZNLgfNPvXKq//+arll9v9i/vqeaNxpcd2j39clr8CXGqU+9sOqymMjIS0lsWmk0hO+lmtTZ+ZKEMQ5YaUFldZ+W5AJxDaEXZ8NU0aNl9O+LGuZyWt2qhAs23p5zLGgmesvTaXZfVabjK2ju18fdXrazde7wrycdTlxCvWHi5rll+k/YeeyHj669Z2a7aBUs1nGOzKua4As7Iptw2GScC3zhZDogAACAASURBVMhwKOFjseD89oEBnT1r/X/LpOS/vKcrO8zX6Zcd+/Z+kLaE+KbfudSxDqv73/qgrLr2uk2y8uz4qgarP/tly2t07OhoTs8F4DxPsTcAOM23cJnqWv9Ii9b9uepa/yhlYJUkbyDzfdJghUfvLF3g5BYti5UQz/a/X/+XagisSvu1DYFVWt+8UZIUuO42yWv9PaoFl35ixp+vXb5WHsPa1zs54gcoJ3ZKemPltqnkO/DZDazZuPLqC+TxGHl/TjrRqKmDBwYSTq1j4f3b//RLffH3f1PXXHthwl49HkPXXHuh5S7FxTpZ9ngMGcX9MeddsvLsWFWDnTL0RYsr9Xvrr7X899JqWTiA3BFaMafV3/JAxjX7l1UqWsRfrGKNjeLV+BfrgZueUnPjrQlh0mP41Nx464wT2lizKqsG/9emGX+uq1yqNSutlSTHTncBzJTNCJVULroocXRXsb3Q+Ss99p1uBccmLa2Pld+62eCpCb3w/K90zxea9fUHW3X7nVdp7S2rdfudV+nPH2zVPV9otjwSpFgny1ddc4Gu/o3Ub96Wg2Tl2VaqGmLi34BYtrxGqy9fkvVzAeQH5cGY0/yrrpOvfkXSZkwT8z3qurxOfUU6ZY1J1dioxr94RhOnWKffNSvWJg2N9b/755Y6LEtSsPuHCg+fmHFKvb55o44M7dNA8FDKr4s/3QUwk92TtnR35bp2p246VyzZzEi10mm42N5684Sefeag6uoX2O7wHO/Kqy/Q0z/YV9AS4fjS5Uw/Zyt3Oe3e9yyE+fO9CeXZdqoaDEP68v/1CS1fUavg2KQe+3a3eg+ezPh1VsvCATiDk1bMecv/5DnJO/Md8FjjpV9dUCnTBXVV6Rob1VUu1Y1Nn9ctV35ZNzZ9PuUpZ+hXmZpIxYmEFezeOeNDdk93gVI1MhLSz185pK7n+/TzVw5pJE2Zrh1OjVDJtnNwocTu5Fq1tCHg6POrayocLTs2Temln7yrnU/t0+ZvdNk6TY5XW+sv2Inn7NLlWEfnZGXOManCqGFIF1xYrZv//WVae/PqPO46O+FwNKGCwU5Vg2lK7x86bbmc2DBkqywcgDM4acWcV7H8Ci3/004d+39bz33MTuOlQnCisVFkPP1c2cT1pxM+lu501zSl1488m3FsD+BWToyiScepESq5dg4uBCvzK9N1Us7FePCsLru8QQf292debFO602Qrc3dv/+xVOnJ4OO9jb7w+j276nUtn7G92R+fh4TP65atHND5+NuXrVFXN0733fVwXLquRJHU935fXfWcjvnN17Huz+6bOmTNTlsuJL79iadomaQDyg9AKSJo6fvDcPxez8VIyHsOnixddp5f6vms5ECab++rNsYNwvNjpriSNhk5px54H1XN0l+WxPYDbODWKJh2nRqgUe1SMFVbmV9q5c2j32R9ZtVAfnBjVUJ7C4eCpCT35xJv6j394va03OwLVFfryVz6h7z/xpg7sT5wh65SpsxH9j//2ir72nz+T8Pc11tH5se90pw2skjQ+PqWuF/rOhTQ3dHxOZmT4jB77dnfCvwM7rAbdtw8OZHxDBoDzCK2AZp5CvtOwoKiNl2arXbBEm5+/zVIgTBcgr136aX3MP1+VofS/pEj6cLbt7RmXjYZO6ZEX7kx6zzXd2B7AbZwaRZOJlTucme7KFSo45Hp/Md2d3HyXOIdCU8r3WfTB/QP6q80vaXQspNCZcMLnU73ZEaiu0Bf/8HqNjIT0xLYevdM3mJf9nT0b0fef2Ksv/uFvJnzOzs9/7xsndKJtVBcur7FVLVBIr716WOPj2b2Z4/EYMiTbTdLSvSEDwHncaUXJGJ7o10t939WP923VS33f1fCEc6Vf8aeQoXnu+s/i9MSJGQFUOh8IH3nhTo2GpmfNxgJk95EfJ13/+gddeuITjZqYn/n7CzTfkXZUUMyO7ofSNmaSUo/tAdzCyVE0maS7W2h1hIqdUTGGIbXfslqXXGr/TaNcG+7E7uQmuyOc7xLn3t6TeS/BlaSBgWDSwBov1R3f6ZP3/N5xPXigP+nfV7s//29981UFxyYL1vF54UK/rXvJ2QZWabqqwe7f9XRvyADID05a4XqFKD8NXHebBrZ/RYqEZbitNWIasUB47w2PWgqQQ96QfnLtCv371w6nXDNv6SVquGdrxmcPT/Sr50inpX3GxvYwCqf8WLnH53bZjKLJ5ZRl9t3CM2emtGDBPF11tbXxGXbKjK/+jQv1mZua5F8wT+/86lTWe87GkiVVSUs2n/nhfjU43Hwpnsdj6MSx0by9fjZS3fHN98mlaSrp31e7Jebj42fPVRnks+Ozx2OcK6ne+YN9lv6O5yJW1bD3TXvPSdUkDUD+EFrhaoUqP43NMbU6EsZNeo506vDQfssB8lf1hm752G0y9vxYisSdEHh9CjTfoYZ7tspX05Dxdd44tivhRDeVVGN7ULry3bSokJwcRWNH7G6hXSMjIS1fXqt3fnVKE2n2Hl9mXIyyzu3f60l6ZzIaNfXBB2N5e+6Fy6p17Ki7QmuqNzvsvAGRrWR/X7MpMY8P3n98/w3a+YN92rfXmRPzy69s0OrLGma8cfOZtqa8/VwMQ7pweY0uvXSJ9r55Qo0fWSiPx8i5SRqA/CG0wtXslJ/ee8OjOT2r4Z6tmny/R6aRRdmxaU7/f8EiiJph7Tr4NzYCZEQn2m7XJ9b/TwVff1qR8dPyVi1UoPl2SyXBMUPjx23tM93YHpSWQjQtiinESW42o2is7svJ/ad6oyCVpRdUn/vnQoSj2TI1+bHKMKRP//ZHtWDBPL36i/fTlv0uWlyppkuXuC60SsnDY3BsUuGpaMavXVi/QIaUVWOpZKeC2byJER+8k1ULSJIhnbtL/PxzvZbLbttvvkwXLq+Z8bFDv7bX8d6KVRfX6+xkWB+cGNPxo6M6/uHfE4/HUHVNhUaGM5f+p2uSBiB/CK1wrUKXn/pqGrSy42XVPvk5Sb+29bX+UEShBcX7zyk4mTieJp3/n707D2vyzPoH/n2SsIUAYREEUVBRUQERFLWiVWlrrXXraF1qa2emm53WqZ3xHVvb0bY/53XeTuvUTvdlumirtRaXWq3WpaJVQQQRXLGCbBJ2CIFAyPP7A5OGkOW5s0CE87muuaaGJ899E7DNyTn3OaqWOkj8wyBPWf5bp+Hi7fCuMN2ZuLLsHDLO/AdKdTVkHgEYEbcUJ37dxrSmI8b2ENfQFU2LujKTyzqK5vJFRafrjffl6P0rG9R4e2MaamqEn6e9kFuOd26e0H94MPeBGKvZWVcUOyoU980aDgAYO66/yQyfYVkpa6lnVzEOHoWO/BkxMhjzF44CAOaSWXNZQVs/xDAOvC1VC5SV1gu+/6Gfrnb6d4UzumRXlCvNZv/raputZlutNUkjhDgPBa3EZXVH+anENxh3Lt6G/bsnQMu3CXqO3DMEv7tYgx0DGi3PduXR/jG0E8g8zI+nMUXq7iforHBbQyW+2LsYl9yqfuuo3ArsPPEjU2ZZxEkwOnw60x67m6am9FYmuhpi7wDIEuZA4h/W3dvqdkxNi86VovpGEAIGRDCt0ZWZXIDtDbxEIsLFC51HlRju69E/jMVnn2Y4bP/KBjXeejNNUBbImPGHB9rb6Mw+YCZI4AHe6PvQanmU32xARnoRhgztI7jU05QRI4NRXq506JlNU8Gj0JE/Ejex/vdk6bJElN1Vh00bj6Otzfr3ZykrOPeBGFy7WsnUxIjlLGfKXVGCg1ZTZ36d0SXbWvZfq+XhJ/dEQ73a7Icit8uxB0J6GgpaictqVNcyXe+o8lO5NAQxYdOQU3LQ6rX+0lC8OP17SFO08Pvs9/i+Ph35IUYjc3Slw04KWEWcBNOHP42zRfsFBfkiToKoPmOtnhUuqDgLTW0Z6jxMRNuMpdCj+9972zRh0tQroPjyWSjP7uxw5lfx1XNMZ357KqamRTyHY/94FklxUqbXravGzxgS0lzG3V2MlhbLH2ZVVarw8YenrQaYQvZfV9eMs2eKceRQvtUOtZboAoLdO/Psuk9XMhUkWMtMlt9UYt/3l/Cj6LLgUk9jgUFSfVZz+7ZzuOigWarGwaMtHat1zw/t54fn/jIZb//7uMXfR2tZQZmPB55YPh4b/5UmaB+sZzmvXxdeAWTqzG93jddpqFfjmZXJuFFQw9wkjRDiPBS0Epfl7SFnut5R5af1zZUorb1k9Tp/aRhenL6nvQGUJ+Aj8cGss9Uo95EgY6AvlB4ilMo9wDt55mts2FQMCBiJkaFTcL70J6vXj+5/L37I+4/Vs8JVTaWAAz5QlnkEYFHiK/bfyEYsGVNNvQJF6yehtTy/8xfbNFCmb4e6MAv916T12sCVtWRPDSnT62bPm3l76EbRmCs9jRoSiCuXhXXfFRosmds/69lVa7RaHhnpRU6di+pIcfGhmD13pP510Z2bPHWiUFBmUmippyFTQfLvH0vCfz/OwMU8+8armQoe7e1YHRLqg9UvTcP2bTm4dKG8w9lRlqxgaD8/xMWHCsqIsp7ltLfBGUsFhLUPlLy93QRnlLVaHjcKamgOKyEuhoJW4rLi+03HtsxXBGcPbS0/1Z/pVNfC20OO3NKfUdlYZPV5A/xH6jsWa2pKocjZhUOjApAfbJRpdbKi6jy8c+yPyCs7YvVauUqDsedv4EN5XhfsrF3y4EV2jySyhS0ZU8XmFaYDVgOt5flQbF6BsKe3OmXfro61ZI/j25vMCH3dHDV+xpYGSJZG0Xz6cbqgPbEwtX+h5xxZ3Sis6fKMla1Cw3zh6+dpd/BuqdRz2PBgREb6Q8vzFjNp982MxuWLCpvWtxQ8OqJjtczHA79/bCyKi+pw9HA+VI2tkHq7YUpKFMLDhX+IK6TKwJaznLY0OLN1b4/+YSwOHrhi9qxzQIAURw9fE7wXmsNKiOuhoJW4LLk0BKP734vMG99bvdaW8lNzZzqFOl96RN/86eaZr/D1GH/LZ1qdpLqpFNUl1jv5umm0mHO2ElcDfobWj+0MrD38pcI7EjuKLRlTTU0plJmpgu6vzEyFpraMqdtyT8FasnfGawmqJINwh+pDQMDrZu+beUc0QDJuLlNX1+y0uZ/G+xd6zpEZY8xlz5lQe3l5uTkseLe31PPggSvMr4NU6oY7pw5G4thws+s4IqAz97uem3OT6fyltSoDW89ysjY4M1V6zLI3S7OPfzlewLR3msNKiOuhoJW4tEWJr6CoOtdiKWuwLJK5/NTS/FehDJs/7azZ65CAlYMIPKyPP7BFq0SEk4N90UfZdZ8gd1cDJlsypnW/bO44t9aSNg2UmTshT1lu71ZvO8xdRzkJrrsno0o8CLMaVlt93ex5M++sBk55528KHt3BynD/LKXRLEQiDhGR/iYbSJkTGCRFhaLR4XuxRhe8OCp4t1TqaS0bz/rz4DggOESGhDHhSBhjPmAFgMiBAYLvayqgc/TvurWgzxYs/66wVHrMsjdz3YwdEUATQroXBa3Epfl6BmHV3TuwNXMtsowaDYk4ib7LLWv5qZD5r0KoWupQqypHXpv99wKAqU390GfMYjSLtSipvYQzArLMLPJDvBBc75jZiULEh9zZ5Q2YbMmYQiRGzQ+vM63T1sg2ZqgnEVKyZ6xeHIZfpE8g3MrrZs+beWc1cHLG6A2g8/5ZSqNZhIb5IDGpPw7sF5Y1FIm4bglYgfbghQccGrzbmo1n/XnwvEEzqB8uW8xQHv7pquD7mgronPW7bmmEjS0cWXpsz94cFUATQroPBa3E5fl6BuGJie/oz56qWuogdffD6PDpNgVELPNfrZG6+7WP5nFAdlSk5THk1GnIL5RhwN9P4kd+KwDHBq1aUXsXY5GWd/q5W3ljK8Zt+xqlF1Vd2nFXeXYXc8ZUdflnaBvZBtmLvbuuxNrVdCjZO1cKLS/sd6nAbTyaxJab2tj6Zt6ZDZxYs7+eXhJBXXoN969sUOPkiQKmdYQaMqwP05v20DAflBQ7pxzaEl3wknOuzKHBu63ZeHs+rLCU7WTN4KbcPaTDn7urWZktnFV6bAtnnd0lhHQNClrJbUMuDbF7DivANv/VEo4TYVBgIs6XHrL7XgAQVd4EWYsWmsoC3Fg3Fl6P/o9D7muM5zhElTfhSqjUQTfkO4zAEWl5RJU3IeVSLaQt2i7vuNvGGHy2VhYKzszqiSWQJc5le04PoyvZ+2k3hwNHrJ+pBgCek6DAfTzCb/3ZuDxzQIS/zW/mWRs4ZaQXdQoGzGE9x7vs92Pw7Tc5gt8cO6v5ko5c7gVA+Jv2IUP7dGnQahy8ODKzbZjNrqtrxn8/ThecoRw0ONDu9U1lO1kzuNd/rUZomK9Nz7fUrKyrOKP02NZ9uEoATQhhR0Er6VU0NaWounjAIffieS3+98Bs9JNH230vP5UGKZd+m0urqS5G4NdvQDRKDC1veS4kK89WLVIu1ULh62bxHK5cEoBGdRVaxeazaPLGVszOrkKJvwea3UTwbNXqg29Djuq4K2R8jdhbeHkpALRWFQrPzN4iS5x32zZhYhkBJATn6cN0vRpSs+WZHAems6OGb+ZZA50D+y6jrLRecGOmYcP7CJrZOWJkMAYPCWJ6c+y05kvoGLQJfdOecdp693RHGja8T4egjjWzbUlMXF+IRBw2f5bJ1IU4N+cmpqREOaQhlXG2095mY47oPNwdHF16bAtXCaAJIewoaCW9guH4k7YwD2CEY0o7tbwGRTW5tt+A59G/Wo37c6ohNQr0vMoKMTx6FPLcq+zc5W90WVBpixaL0ytwKFqO/JCOI3pEWh6RFU2o8tGgVWr+XxEiLY9hZSp4tWoRX2T9/Js9HXdZxtfIEuZA8dVzwgJRsQRuQRFMexF5ByB46Sam57gCa69hwKwX0XzlBHMwyxpgiDjObFaRtdmR4Ztx1n3wPAQ1q9EF2JcvVli9Z2CQFPMXjgIg/M2xs5ov6UgkIogM/n4b7utMehFuFNYAPBAR6Y/EpP4AgFMnC522H1MuX6zoENSNjO2LXd/l2t38yj/AC3ffM9SmLLaugRNT0zEL9zLMdtrbOdgRnYd7O1cIoAkhbChoJT2e8fiTKIUWR6LlXTpL1SyOg1eLtlPAqjP5lwsoSQpErYXgkYVhFlTaosWsnGooPUTID/bqkCk9Ei1HnZU1tSIOp6P8kDHIt0M5sFk2dtxlHV8j8Q+DLHEelOnbrd5bGjcDqryfmPYTMGNVl53PdRQhr6Hx62Vpnq0h1tLZE2nXUV+vZtq/OYZvxln3oWOpWY3Qsl2OA2JHheqzpywzYp3VfEmnpaWt0/enbFBjT2peh8zjxQsKHNh/BT6+HqirbXbafkwxDOp0e7M3YPWTe+LZ55LtymI3NbXa1HTM3L107O1kS51wCSG9EQWtpMczHn8iU2sFn+kcHjIJl8pPOG0MDdDe0VfpLupUUgsAUnUrFp9WWMmIulsNMIH2Ul7DEmQdmbpjplTpIUJ+iJfg/WtFHK6ESqHwdcPi9AqLgastHXdtGV8TvHQT1IVZFp8n6ROJluJcaCquC9+MWALf5IeFX+8ihLyGnZj4QMBUabGffxhTNspRAavuzbhhgGhrAyFzzWqsnUvVGT4iBEuXJULZoDZZhmppRqyzOhMbMvz+rDUi6uqAVSf3/E2o1RqcOlGAmhr79sBxwGNPjEOblrcri+3l5WaxpJr1Xjr2drKlTriEkN6IglbSo5kbfyLkTGewLBLRfe/AxfI0weuFqDhUeGqZsrhaEYf8EC+zJbaWMqKyFi1U7iKTQa0Op+UxREgm9Jb8YNP3sabW2w2HouWYlWO+ERJrx11bxtdI5KGQ+Aaj/5o0KDavaH++YamwWAJZ4jzwrWo0Zu1m2o8jz7I6+mypOc0FZ6HM2GHz81vL81H+3yfBSdzNlhbfP/cNh2SjWESPCMZuo2yhrUw1qykrqcOFXMudjnUuXijHvu8vIjurFDXVTSbvb64U2ZHnN83Ranns+CYHw4YHI+/8zS79OQmVf6US+VcqHXIvngcOHriCQYMDbf7dMD4LbFzqDQAHGUYIGWc77e1kS51wCSG9DQWtpEczN/7E4plOg/mvaflfMa0XVVKLuSWNODjCH78GC89WNruJrF5jnBHVMQ5q6z3FqPeSwLdJA9/mtt9KgjkRpCPvhirvoN17McdS1tiWjru2jK/RlR9LfIMR9vRWg+CwBmJv//Y98Dx+/etApr24hUQ55Cyr0PO5xkGt5+BxaL522mKQa/gcTuSGpqsn0JjzA8DbVylgNrg3yMY++efDSP2hRFCzInsFBHihrLTeZIBoK+NmNV9tyRL8XJ4Hjhy6ZvU6U6XILHNp7XHxggIXLzj/Z+MqcnNuIsDf9g7p0SOCzWco+fYPG4YND8bFPOsfbJjKdtrbyZY64RJCehsKWkmPZmn8iakMZuDImUi+7039/FdvDznTep6tWsjUWgysbGYKWj1bLQUVHADrn+abC2r1Xx/7OwTe/yKKX78HbQ3mm8pY3otllrLG5rKUljKOrONrTJUfS/zDOp2jrT30HlPHYI+I0ej3lx8EnWXVfT+tlQVorboBt8ABcAuKhCxhDiCWWD1b2nw9Ax79YtF4fp/FPSq+eg7esffCK2oi2ppqoMo9CHVRDqB1bLdpIVrL86Ha+RdEDv1/Dg1ajbsJ696Ma1rbcMHBwbFh+WZpST3Ky5QOvb+OcSkyy1xaIpxWy6O6xvaMcllpPZQNash8PMx2uwYAN3cxWlvM/52zlO20t5Ot7vnFRXU4ejgfqsZWSL3dMCUlCuHhfmzfMCGEuDgKWkmPJmT8iWGwFzwxWR+wAkB8v+nYlvmKoLmuus68ABClaMLhaDl4AWW2hs8zTXh5W6cSYkUTZGotJH0GQtvShMJXxpoPhDgRwLc/x55GVaYytZKgSHhEJKBq93p9YAqxxGrGkXV8jdDyY9ZgWJb4gNWAVZ9BzUw1GTgqtjwHibwvNNXFlu9TUQBNRYH1TbVp0Jj9PRqzv7d+bRdQZqbibN1jDrufSMThmZXJuFFQ0+HNPA/gf191zGxkHY5Dh/LN7VuzHXp/Q4alyM7uHNzb+QdIbR5ZU1PdhJ3f5WLuAzEWm3G1trTpuzPbmu20tZOtuWA6N+cmZVoJIT0OBa2kR2Mdf2JcviqXhmB0/3uRecN6YGB4xvRItBy8wJjP1FxTVip3EQ4Nl3c6j3okWo5hDe6YerEWXhaCG5FPH4Qu34KSN+6DTK0R3KjKFONMLefuBU11Maq2v6B/TLHlz+DcvMCrTWSzDEpOw/60HRBLbP75mcUxlkBbud5id14drcZqwHo7a9T6QqFoQntlgP1i4voiPNwPPj4eOJNehMsXFbh8UQFwcHi3XZ4Hqioa4evnibq6ZpSWsDdzYqErRXZ25+Dezt/fy66RNbk5N9Ha2mb1DLBWy8PNTYTp9w2DVst3ydxPaw21hIxzIoSQ2wkFraRHYxl/Yq58dVHiKyiqzoVCWWD2uYFif6RcKoXKXYSvk/pYbPBkSN6oMdnRl4VKJsP2qcNQ2dL5bJVWxOGiXyvKYt2xOF1kthGTtqECdUc/0r9WQhpVmWIqa8y3mMgia9tMB6wGWsvzUfX9P+z++TmEURxmXNLceH4/e3feHqKRC0Ch+zgUSRLAOyhgDQyS4u57huKzjzNwQcCZQUf44L1TeGndXcg7f9PucSvWeHm5QdmgxskTXTsPtTfhOGBApD/iRoXa3CRMq+VxSeA54NZWLQquV+P3jyUxr2MLIaN8LI1zIoSQ2w0FraTHEzL+xFKTHV/PIKy6ewe2Zq5FVtH+DqXCuqZNCwYvR8WPidgz0ldgoMchVjIYyenHBHX0teTQIHeTAashIZ19lZmpiFh3BurCLEjL8802qrLEEVlj4z0NuLUni+NrTJQfW+zEy9qYSNt+vbkmSr1RE+eHX6RPoMBtPHiO/T8lEokIWi1vsqTy7nuG4r8fp6PagY2WrNFqeXy9OQuDBgc6dR2RiMPAQQGC5r+aw3HtY3YuXVRQptYMngf+s/E4YuL64tE/jMXBA1dsGlnD8gHGpQsKk6OTHI2lrNzcOCdCCLndOCRo5TjuXgBvARAD+Jjn+Q1GX/cA8AWARABVABbyPF/giLUJsUbI+BNdx1ZzfD2D8MTEd1CrKkd2yY9QtdRB6u6H0eHT9WdgFWNmIt/3jKA9iTgRkk/k2BWwKj1EyAuT4qrAmaoWO/sCQJsGTVeOo/+aNJT+50HgSpq+UdWFUCkyBvqg2V1s9v7m5sDa5da5Td/Jf0TDL5vRUnqxY8ApEkMiD+1cfmzQpIjXtnYKZG05KyuoBLiXaOL8sMdnA+rFto/o0Wi04DggLNwXw4b1gZ/cS19SufnzzC4NWHWuXqnE4CjnBq0xcX1x6OBVu8bODBnWB48+NlbfwCf3/E2HjYvpSYzLZGfNHYk9O/NsLhe2hufRaXSSM7CUlZsa50QIIbcju4NWjuPEAN4BcDeAYgAZHMft5nn+gsFlfwRQw/N8FMdxiwD8E8BCe9cmRChL409YSkrl0hBMGfKIya+VTEyBNi9T0H20fBuu+KgRb0OMZ+78qtU1rcyDBdq770p8g+E7biGar7TPp5WptUgqUCKmVGV6RNCtkmChc2BZVX33946BKieCe9gIyEbPQf2pLdBUFpj4Rjo3KTJs8MR01hmA8vx+NOYe6F0B663GXKb8In3CroBVh+eB0uJ6qJs1+rN33d2cqLlZ06lrsSMNigrArh15dt3jyqUKXLtSgcFD++iDkd4YtAr9ORmWyc6aO1JwxtWW3wPj0UnO0KRiW6Mr9kQIIc5m+0DG3yQByOd5/lee51sAbAUwx+iaOQA+v/XP3wJI4TjOMYefCGEg8Q8DJjyA88PDcSKkFccrDqJW5Zgzc00itlEjtsxD1Z2ZvdJXalN3X2tr6rrvmuquqxsR9PixMqRcqMHEq3VIhEtS1wAAIABJREFUuVCDx38uw6ycaqcErAA6B068Fi0luag5+JbpgNWcWw2eitZP0mfYhVJlf29+VmkPJEt6EP4zVpn8WiMXgAK38Q5dr6pShW+3nQPQ/c2Jfj5yzalnWnd+m+eQ+3/w3mls/jwTygY1Rsb21XewdVXO2N+4OyIg9J2ErkzWz88TMXF9rT8BQPSIEMH31zEcneQsXlK2NbpiT4QQ4myOCFr7ASgy+HPxrcdMXsPzvAZAHYBONVgcxz3BcdwZjuPOVFSYnyNJiC3qmyvx4fGn8cLuO/D1mZex+/wb+PrMy3hh9x348MSfUN9sX6bClpmurA5Fy5mbI7Gs6Tk0GYDl8lndiKDxvzYgvqjRoWdYWVhr5GROa3k+FJtXtJeE94l07KZ6CI/wWIi8fEx+rdB9nE1nWK25kKdAWUk9cxbJ0ZzdhMmRcrLL8M6mExDfOgvcnTgOGDEypFNwKhJxiIsPxcq/TkZcfKhDg1dVY4vgn5euTBYA5j4Qg8Agy93RA4OkWLAwDtEjQixeZ0gk4jqMTnIWlg8pumpPhBDibI5452Hq35zG/xkRcg14nv8QwIcAMGbMmNvorQNxdfXNlXj94O9MdgDW8hpk3vgeRdW5WHX3Dvh6Btm0hq0zXYVSeoiQL/D8qq1rVu54CbLYe6Eusa980dUpM1MROGsNHDWehZUkIBya2jKT81xdgdjb3+wsWzUnc9q632zNxthxA5x2/55IV/o694EYm7vkOkLsqFAsXZaoP2drOFtX1wTI1NcHRPrrZ/ECwIF9lwUFoiIRhwB/trFcujVkPh7404qJ2PldbqdSYeP5qgsWxmHD/zuMlhbrf1dj4pw75kZHly0Wcja3q/ZECCHO5oigtRhAf4M/hwMoNXNNMcdxEgB+AMy3MSXEwbZmrrU4sgYAFMoCbM1ciycmvmP1fsYjT2QJcyD3D0N83yk4W/aT1efb0mWX9QyrLWuqsr+HysI81x6jTYMb6yeDb3buPE5T3EKi0H9NGup+/gRVO15y/nqhw9Badln4EzgRZIlzoczcafLLHrxtGW4hSkvqERHhD5GIo664DHJzbmL23JFmAzEA8PX1QOLYcMSNCkNhYQ1OnihA+U3H/CwDg6SY+0AMgPaAylLTH1NfDw/30/9zWWm94GBMHsD2IZ5hmazMx8NqkK277tnnkvH2v49bDFwNX4OuIORDiq7eEyGEOJMjyoMzAAzhOG4gx3HuABYBMD78tRvAslv/PB/AYZ6/nYqwyO2sVlWOrKL9gq7NKtqPuibzZ1w19QqUvrMQv/51IBRfPoOq7/4OxZfP4Ne/DkTpu4uQdL4YIitvtkVaHhOusQdLtpyB1eN5tIk4qNwd8Ve+Z+jygFUkgSxpAfqvSWvvVM04dkfSZ1B7cyRGnIitnNw9bAQk8lDIEuYA4s6fa0a0nAYnoJrAFjwPFBbWdHupqyX9wn1d7vyorvRVF4iteH4Swvr5djiPWV+vxs9HfsWRw/mIGxWKJ5+eYLVE1hpd6a+uiZYjCC3dnftAjEPKZHVBdMrdQ3BHcqTJrGRIqA9WvzQNw0cGdzrj6ozXQAhdtthUyXV37YkQQpzJ7kwrz/MajuOeAfAj2kfefMrzfB7Hca8COMPz/G4AnwD4kuO4fLRnWBfZuy4hQmWX/CioZBdoLxXOKv7RZIdgiyNPbjX5ORwXAK3I8hsurYjDycG+FmemmmLLGVg9jsO1EC98LZNgcXqF85omkQ7cwmMhi5sBt8ABnTpVs47d0VT8atMeWkovWL/IgO+Eh/SVBO59o9FSktvh6958NSJbT+G6e7JN+7GmqakVcx+IQfGN2m4Ze2NNTFwoHn0sqUN2LiREho/eP92t2WFd6auyQY0vPztjMgNnPALGUmbWmrBwX/zhsSSHl56ylO4C6LIyWZmPB37/WJLVzGxXEpotJoSQnsAh3TR4nv8BwA9Gj/3d4J+bASxwxFqEsGpUs82VUbXUmXxcsXmFxZEnLGdOrc5MNSFK0YQj0XK7SoRrvd1wKFrOHDAT27TVlMD/3pUmZwCzjt2xGa9F+9ldIUEJh7rjn6FyxxqLmeA7VB+iSjzIIWNvjHl5uUHm44FnnkvG1i3ZuHLZtZryeXm5mSxxXfnXyfj4w9Ooq23utn0BwM7vcq2eazUcAWMY9NTUNOGYwO7JN0sbHLFtk1iCsa4uk7VW/twdXHFPhBDiaFQrSHo81q6+Une/To9pakqhzEy1+DyWM6e6maksZGotc/MmU3QBM2HnFh7LdL22sRqKzStMfk3iH8Y0dsc+QrNoPFpvXrZauuzF12GWag0GehYy3Ns6wxJOmY8HPL0c36XYHpY6sYaE+mDN2ruw4vlJiIsPRdTQIMTFh+KPTyY5vZxYty+WGbe6ETDAb0GPv7+XTd14nUVI6S6VyRJCSO/gWu8ICHECpq6+nASjw6d3arSkqSmxmhFjPXOqu949PAY+4xZBdekomvIsN3FKuVQLha+bXWNvdAFzfFGjzffojUTeAQh98gvcWDeWKTuqzEyFprYMEnlop9+rwPtfhLowy2IG39WI5aGQp/wJfpMeRZ+vVuK7vKG44Z7kkHsblnCyBGBdRUiJaXh/PyxdltjpeUJKWO3d1y/HCwSX+eqCTsMMHeu4IV1JcnejMllCCOn5KGglPZ5cGoLR/e9F5g3rXXHj+05B46crUH52J3PZJuuZU931LcW5qCpdB5GH9aYo0hYtFqdX4FC0HPkhtncTtqupUy/lf98qePaPgyxxHpTp24U/sU2DuhNfQl2QCaXx75VYAmncDLiHjUBjzg/OLxV2gLbaMlSlrkPTtVNQ5ezHJN4be8QbLJYK+2jLIQnoj5raFrPXGJdw5p1nP2fpTN7ebjaVmNbVNaNfuB+uXqlkCgo5DkgcG46szBK0tZl/HQxfN3uDTi8p24dhht14XQGVyRJCSM9F71xJr7Ao8RUEyyItXtNH2h8TD6ZBmfGtTcFDlKLJaudgnU4zU7UaaJuEdbOVtmgxK6cajx8rw7Ay22Yy2tXUqTcSS+A38WEAQPDSTRAxNlGq+eF1079XbRqosvagpfQCBqzLQOCC/wXnbl9H1y6h1bSPRtJq2kuFG1ZjYMvxTl2FOV6DgS3HMbt+FR4Ze52phJM1AHO2J56ewFRiqmxQY/NnmfjfVw9h3/eXmL+f2FGheHBxPNasvUvw62Zv0OmIbryEEEKIM1CmlfQKvp5BWHX3DmzNXIusov0dSoVFnASj+9+LqTk3wZectHkN3ZnTK6HWgw5b5rSaWi9I2QqGCZwATATMrkgkBrTmZyJ2NVniPH3nX4lvMAJmrELlty8Ifr620XLjq9byfNx8fyk4iQf4Fts+iOhOXnwdUhpfRyMXgEL3cVBzMnjwSkS2nIKUrwEAeGqqmEo4WQMwZ4qLD0VomK/g65UNaryz6YTVhkjmGGZPWUpfR8b2xe7UPEEZalNBp5+fZ5d14yWEEEJYUNBKeg1fzyA8MfEd1KrKkV3yI1QtdZC6+2F0+HR4N7fh108H2r1GyqVaVPbxR7VEbfYaeWMrUi6xdTQ2x5aMqSMCZqdzoYDVLSQKwUs3dXjMd+JSVKa+7NBy3paSPIfdq7t489UYod5n8mvKzO/gN+Ux+PkFCyrhZAnAnMmWzrNCOviaYmqki46Q0ldHBJ22duPVB9WqVnhJ3TAyti/8KKglhBDiIBS0kl5HLg3pNIe19pf3HBKAyNzk+J97d2P7lbeRVfg9tAaVdroMZ8qlWofNSWUdg+Or0jgsYO4t3IIHd3pM1/mX6WyrM7lLARfP0KoLs1C0fhL6r0kzOQLImJ+fJ4YND8bFvHKH7uPOaYNRU62CStUKqdQN48YPwOlTNwTNBBWCpYGUSMThnnuHggfsahxkGDD26+eHohu1qLEw49ZSIM46J1XZoMbOHbnINTqDvDs1z6bXjxBCCDGFglZCALRZKd8UKmDGKvj3icYjzU9izBcfIT/YE81uIni2ap2S4WQpSZY1afDQaYXDAubeQnX+R5PBVvDSTVY7/4q8A6yWBtuF4yAdNROqnP3OW8OBWsvzodi8AmFPbxV0fWSkv8OD1kmTB3YKDIcM6+OwzrMsDaS0Wh6eXm42Nw8yFzByHOAn90RDvdpk0DntriHIOVdmNisqtCTZUhm0VssjJ7sMJcV1NHKGEEKI3ShoJQSAmLGxjjnS2HugqVeg+P/ugUzd1iVjZYSMwfFVteKh0xUUsNrIVLAl8Q1G/zVpUGxe0T7D16grsCxxHjwHJDCdfWXBecjQ/6XjaL5yvL0p0m3CcASQNY4uDQ4JlZkNRB3VebarxsZYChh5HqirbYa/vyfGT4yEVsvDy8sNAwcF4NCBq9j0ZpqgrKi110RIGXRVpQo7v8vtNAaIEEIIYUFBKyEAZAlzoPjqObtLhJvzT0J1+WdoGyoctDPrLI3BcUZJcm9lKtiS+AYj7OmtBvNXayD29ocsca5+Lqujz74CADgO/V86Ds/+sWjM2u3Ye7MSieEeNgItxeeFXd+mgTJzJ+Qpy61e6uhmTEuWJjj0fqZ01dgYIQFjTU0zSorrsHRZosOzoixl0Lk5N1Ff10yNmwghhNiMRt4Qgt/OKNqrtbIQyjOpDtgRG8MxOCkXajDxah1SLtTg8Z/LMCunmgJWR7gVbJki8Q+DPGU5Ame/CHnK8t86DTvo98qYbOx8ePaPBQBwIvsDO0lAOCCy7TNM2ZgH4JO0gOk5bY01gq5jGcFizdDoPkwdgG3VFWNjbAkYWbKiQrCWQeeeF7ZfQgghxBQKWgm5JXjpJriFRNl1j5ablwGtg7NqDGRqLeKLGjH+1wbEFzW6fpfg24zQYMuQI36vDBl2M9bUK1B79AO77zdgXQYC562zeS+s5fVib3+zX7upqsfnF0/irexD2FmahaiRQcz7MuYn98SiJfF230fQWrc6+Aph69gY1oAxI72IOci1pqvKoAkhhBCAyoNJL/RbKWc1xN4BkCXMgcQ/zPIZRSHEErSUsU5NJbcTS8GWKbrfNVniA1Dl/QR1UY5dH2pwHjKErUjVN4RSbF4BTWWBbTe7de42eOmm9vvxbB9wuPeLQfjfDkLiG8xWXi+WQJY4t9PDlU1KvHRqF/YX5kFjsBfvNg/M8k6AqFHMtD8dP7kn/vz8pC5tBGTr2BihWAPGG4U1zFlRa+d7bS2DptE4hBBCbEFBK+k1NPUKKL58FsqzOzu8uVZ89VyHN+/GZxSVmd9BXZhl9f7esfei8dwPNu9P6SFCfrDXb92GFU2QqSlT6jLMBFummPtdg0gMj4jR0LY0obXsEvMWeLUSVbte/e13NFN4KbrYPxzyu/4EtGk6nLvVf50xWyqf9pQ+eGYZASRLnNepCVNlkxJz976HgoaqTtc3StRIjTiDO8uHI7jGj6k5k3+AF559LrnLO9eyjo1hxXzWl7GflZCsKMscXZGIw8CBAdj8WSaNxiGEEGITClpJr6CpV6Bo/STT40naNFCmb4e6MEs/1kR3RhEA/KY8hhuvTYCmosDs/SV9IuEVNRGNNnRxVbmLcGi4HPnBHZsoHYmWUxMlF2Iq2DLF4u+atg3qwixI+kRC0mcgNBXXmfehawilPLuLqRpAftefEDjzf8x+3d5sqZARQIalzYZePrXbZMCqo5a04kC/HMxOHIWlPhP0I1gGDgzAoZ+uOiUwtJfQsTG2YA0YIyL9cfGCQvD9hTSH0pVB52SXWb02engffPHZGRqNQwghxGYUtJJeQbF5hcU304C1GZLWGqtwaK0tZt6Xyl2Er5P6mBxXoxVxuBIqhcLXDYvTaVxNdxL59DEZbJki5HdNU1EA6ci720t7ecY02K2GUMyzha0Eo/ZmS4WMANKXIhu4qarHvkJhzX9+KD+PtXfORIj0t4ZKzgoMHcVRo3SM7yk0YIyJ64vEpP44sP+K4CBXaHMooWXQ4DgajUMIIcQuFLSSHo+ljNLUWBPF5hVWM2Kaiuto+GUL894ORcstzlcFgFpvNxyKlmNWDmOQQhzGJ+nBTsGWKSy/a6oLh9gD1lvaR+s4rvmRjj3ZUsD6CCBTfjQ6wwoAgWolJlZeha+mGfUST5wIGoIqDxk0vBb7C/OwbPiEDtc7IzB0dSznZmU+HkxBrtCAX0gZdMpdUXjrzeOC7kejcQghhJhDQSvp8ZjKKI1mSLIEIVpVLdu+PETID/ESdG1+iBeU7iLqBtxN6g6/h7YGhclMoSGm3zXGxkeGxN7+Dml+ZMzWbGmn+xiU11tTq/4t6JK3NGJF/iEkV16FxOD1eebaYaQFDcHbUSmoa2kSdN+ejvXcrLOaQ1krg/7leIHDm0ARQgjpfShoJT0eaxml4VgT1nODLIzPsFqiFXHID/FCfFGjU/ZCrOC1nc49m8JcsmuLWwGoRB5qVzmvObZkS+0h95C2/39LIzZlf4Xwps4f/kh4LaZWXMYQZTnKEmc4fA+3K5Zzs85uDmUu202jcQghhDgCBa2kx7OnjNKZQUizG9uYZNbrieNZPvfM/rsGTsSccTUMQO0t57WEJVtqj+kRI7H29B48m3/IZMBqKLypFgN/+RQYc5/T93U7EVoe7czmUObYOhqHEEIIMUTvgkmPJ0uYA4gFfj5jVEbJHIQw8GxlC1ZYryfOoTv3bArr75p0FFvwZRyA6sp5ZUkLOq8rlkCWtMBiZtgV9JX6Yn6ffphUeVXQ9a3n9ph9/YkwuiA35e4huCM50qlnSEfG9oVIYEUJSxMoQgghvQsFraTH03VFFcK4jJIpCGEUpWiCSOBZL5GWR1Q5neVzCbfOPZvC+rvW9w8fwS0kyvrFIvMBqK6cd9C/riP44f8g8IHXEPzwfzDojQKEPb3VpQNWnefELR3OsFpk4fUnrkfX6VgIliZQhBBCehcqDya9gq1llCxjQERSOVMzJplai6jyJlwJlVq9Nqq8iZowuRDDc8/GWH7XLDY+4kRw7zcCPhMegt/Eh62eJ+2qcl5n8GpRwfJAlI4svf7E9TirCRQhhJDeg4JW0ivY0xVVSBAi6TMQgIi5g3DKpVoofN0sjr2RN7Yi5RLbfYlzWRofw/q71tWNj1yRM8b3ENfh7CZQhBBCej6Ot3FOoLONGTOGP3PmTHdvg/RAtgQHmnqF2SDEO+4+qItzoKkosGk/KncRDkXLkR/SsZuwriQ45VItpJRldR0iCQa9WSAooOzNgSgLTU0pfv3rQMHjewa9Iez1J66nK5tAEUIIcX0cx2XyPD/G6nUUtBIinKkgRPHVSkHlw9YoPUTID/ZCs5sInq1aKgl2UR4RCYh4JaO7t9HjlL67SNj4nqQFZrs3E0IIIeT2IjRopfJgQhgYnxvU1JRCeeY7h9xbptbSHNbbgHTk3YKuay44i+ofXkebshJiWRAC7lsFz8gEJ+/u9uXM8T2EEEIIub1R0EqIjTT1CpT8ezagbevurRAjnIcMvFpp9Tr3fjFw7zcCyvRvBN/bLbC/xa+rSy6g5F8zoKkp7vC4Mv0bSALC0e8v++DRb4Tg9XoLe86dE0IIIaRno6CVEBto6hUoWj/JYlaIdAFOBBiOSrkV3ATO+TtKN82zmrUL/9vBWyNUvhN8ntJwjq8xdckFFP49AWhrNfl1TXUxCv+egIhXz1LgagI1pSKEEEKIKRS0EmIDxeYVFLC6ALeQIfCd9CjQpukU3PRfk4Ybnz2NluzdEBlmw8USSEbNwi93/AGVv56H3EOKSaNmQXM21ep6xnN8jZW8McNswKrX1oqSN2Zg0JuFQr7FXul2Ht9DCCGEEMejoJUQRpqa0vbyRdLtWm9eRv2xT9B/TVqHstHKJiVeyjyI/b5D4Zf0BCZWXoWPphkqNy9cCk/AFS2PtvPH9NcHefbDBz4h8G8oN7uWtfOUzQVnoakuNvt1Q5rqYjQXZsMzIl7Q9YQQQgghvZmouzdAyO1GeXaXsFJS0iVay/Oh2LxC/+fKJiXm7n0P3xech4bXospDht39RmNLxASkhsXjolaLNnTsml7p5oU/xvwO6aFxgMjoszyxBLKkBZ0CY2PVP7zOtO/qvf9kup4QQgghpLeiTCshjNoaq7t7C8SI8sx30NSWQSIPxcundqOgoYr5HrXu3lg9dDoWJT+GlzxFzOcp25SVTOu1Kdn3SAghhBDSG1HQSggjsXdAd2+BGNO2of74l2iZ9hT2FebadatvK0qw6sHVCJH6Mj1PLAtivD6Q6XpCCCGEkN6KyoMJYSRLmAOI6fMeV1N/cgt+LMyDxrCbsA00vBb7C/OYnxdw3yq262f+jXkNQgghhJDeiIJWQhhJ/MMgS5zX3dsgRlpKL6Cpusgh96praWJ+jmdkAiQB4YKulQSEUxMmQgghhBCBKGglxAbBSzfBLSSqu7fhslTGzYy6Aq9F6LWTDrmVn7uXTc/r95d9gNjN8kVit/brCCGEEEKIIBS0EmIDiW8w+q9JgyxpAZUKG+EBbBg2Axqu6//1oqgqgsTOdSWcCPdGjLTpuR79RiDi1bNmM66SgHBEvHoWHv1G2LNFQgghhJBehd5tE2IjiW8wwp7e2j639ewufbdZ5fn9UGV/393b6zYcgCcK0nA6YCAmVl3r0rVzVEpMjR2Gg0UXbb7HjIgY5iZMhjz6jcCgNwvRXHAW1T+8jjZlFcSyQATM/BuVBBNCCCGE2ICCVkLsJPEPgzxluf7PsrG/Q9H6SWgtz+/GXXWv8KZaNHMSlHn6IbS5rkvW1HAi/BwYhSeDI3C1VmHT2JtIn0C8Nn62Q/bjGZmAsKe/dsi9CCGEEEJ6MyoPJsTBOpQOd0OJrKuIUlWiT3M9yj180AbO6eulBQ1BtYcMbbwWO2cuxz39hZfgSjgRZkXGYefM5Qjykjlxl4QQQgghhFXvfUdNiBPpSocDH3i1u7fSrSTgEaJuQKWHDG1OXKfYS463o1IAtDdRCvKSwUPgWePYgDCcfnA13pu6hAJWQgghhBAXREErIU7kl7yMGjUBtwJXH7vuob31P0MaToQjfYZhRfwS1Lp765so3VTVY19hrqD7Xqy5ade+CCGEEEKIc9G7aUKcSDfTVZm+vbu3Ah7ogiJd8wJbGlHq6Yuw5nrm516KHIeX+iaAAzCx8ip8NM1okHji+K2SYJ2p/YZhf2EejhRfhoY3DnFN0/Ba7C/Mw7LhE5j3RQghhBBCnI+CVkKcLHjpJqgLs7qtMRMPoFbiCa+2FngKDOScQcJr0TJuCdwaytGavRvQCiwYFkkw/qkv4Hs8FQUNVdjdb7TJy6QSdxwpuYyDxeydg+tampifQwghhBBCugaVBxPiZBZnuool8I6/HxCJnbY+B8Bf09ytAatOYmA/DFzxLQa9UYDygEhBz7k8IBHBfaOwc+ZyzIqM6zSHVQwO3hJ3qDQtgrOrxvzcvWx6HiGEEEIIcT7KtBLSBczNdJUlzoVEHorif8/pFbNdxd7+AIBKDxmejb4fb2ZtRnhTrdnri73keDlsLJJU9QiR+uK9qUtwU1WPHwvzUNfSBD93LxwtuWLXXFYAOFpyBTMjY6kREyGEEEKIC+J4nu/uPZg0ZswY/syZM929DdLL/RZkVkPsHQBZwhxI/MMcvk7V3v9D1fYXHH5flyKS4Mzyb1HhJsWlmnLsKciBvKURz+YfwqTKq5AYZEk1nAhpQUPwdlQKat29sX78HJNnTm+q6jH+mw02Z1gNRfoE0sgbQgghhJAuxHFcJs/zY6xdR5lWQkzQ1Cug+PJZKM/uBNo0+scVXz0HWeI8BC/dBIlvsMPWavhls0Pu5cqOBkbh1dwTHR6rdffGayNmI1CttNhgydyZ0x8L8xwSsAJAQUMVXj61G+9NXeKQ+xFCCCGEEMegoJUQI5p6BYrWTzLdOKlNA2X6dqgLs9B/TZrdgaumXoGC1yZCW/GrXfdxdcVecmyKmmb261UeMrMNlgDzZ05r1Sq792ZoX2Euym+VIhPXpCsPr1WrIPeQYnrESPSlnxchhBDSo1HQSno94zfBkw6+AY2VTr+t5flQbF6BsKe3Mt9f9ya7skmJk2/OwbAeErAqxe7w1GoslvnaQjd71RS5h9Sme5pD429cV2WTEi+d2oX9Rtn1taf3YEZEDF4bP5tKuwkhhJAeioJW0muZehMcqFZibNYuQX8xlJmp0NSWQSIPFXx/oP1N9rTwaJSVXcYbhT3n3PbHAyfjRNAQfZlveJ9IfCr2RYWHbcGqzoyIGLOZz+kRI7H29B6HlQgDNP7GFVU2KTF373soaKjq9DUNr8WeghycryqhM8mEEEJID0Ujb0ivpHsT/H3B+Q4Bz0SjhkAWtWmgzNxp8f4nL5/EfcWZWFp4ErNLshCoVkLDa3Gg6AIGFp4RvpaL03AiHA8aoi/z9bt/NXynPWV3wBrpE4jXxs82+/W+Ul/MiIixaw1jNP7G9bx8arfJgNWQ7kwyIYQQQnoeyrSSXsncm2BfTTPTfdoaa0w+/o8jX+KR0/9FslEQ/My1w/pyWda1nIVH+yxXe6QZNU7q5y2367yphBMJLvl8bfxsnK8qsRrUCF3XXCky6R43VfXYV5gr6Fo6k0wIIYT0TBS0kl7H0pvgeokn0710c0cNlZZfw6w9L6NfU+eAVsJrMbXiMoYoy/FD3zimtYzVuHnBv5W9lLXM0w+7+46CBFo0SDxx3q8flt441WnsDMQSSONmoKU4F5qK62bvV+wlx9tRKfo/6wK//YV5TPuaFRmH4QF94efuhXsjRgoOPIK8ZNg5czlePrUb+wpzO2TOdcGvuk2DA0UXrN7LUiky6R4sHaLpTDIhhBDSM1HQSnodS2+CTwQNwTPXDgsr2xVLIEuc2+nhgv8+ZTJgNRTeVIuRdSXQcCLmEmFdc6PNA8bjg7NfMj2/3MMHfxr9UKemSIZjZ/za1FieNBthExZDIg9tH/+zeQXqMr6DmG/rtA/jJkvBXj4QcyKm86YSToQowV9kAAAgAElEQVR14+63OWAM8pLhvalL9E2v6lqaOgS/lU1KXNlbbjEba60UmXQP1ow9nUkmhBBCeh4KWkmvYNjBN6uiyOx1VR4ypAUNwdSKy1bvKUuc16kJk6amFAFXfha0p3E113HafyAmVl+zeu1lWTCOBw3tNMNU6F51AlsaIeJ5k18zHDsTHTkBy259bxLfYIQ9vRWSsqt4e8vf0KKsMjlLVadUVYe5e9/DzpnLMSMiBnsKcqzuy1EZzr5SX5NZNiHZWOo+65pYO0TTmWRCiL1aW1tRXFyM5mbXOMZDSE/g6emJ8PBwuLm52fR8ClpJj2aug68lb0elYIiyHOFNtWavcQuJQvDSTZ0eV57dBZG2zcQzOpPwWuT69kNEU5XFtYq95Hghdr7JkTFvR6UgvvaG4DJhCa9FcuVVizNRAdPZquDQIfjzn77AfbvfRqmqzuLzdU1xhJw37aoMp7VsLHFNrBl7OpNMCLFXcXExfHx8EBkZCY6zt+sDIYTneVRVVaG4uBgDBw606R7UPZj0WOY6BFtT6+6NFfFLcKTPMGg4o78iYglkSQvQf00aJL7BnZ7b1ljNtEcJtGbX0nAiHOkzDCvil5idcVrr7o19fWOZ1vQR0ADKXLZKw2uhaGoQtM6+wly08VrsnLkcsyLjIDH6/iScCLMi47p8TIkuG7ti1DQsGz6BAlYXx9Ihms4kE0Icobm5GYGBgYID1puqenx+8STeyj6Ezy+exE1VvZN3SMjtheM4BAYG2lW9QJlW0mMJGZNhTq27N14bMRuLgvvjJU8R2hprIPb2hyxxrtm5rAAg9g5gWqdB4qlfS3em1EfTbLH81pjCg+1NeoOVZlOWslW2NsWhDCexhytl7AkhvYOQgNXSPHY6dkJIR/ZWLVCmlfRILGMyzIn0CcTqacsgT1mOwNkvQp6y3GLACgCyhDmAWNhnQbrZpjq6M6VbIiZgd7/RggJWoL15VKeMsMA1TbGUrbKnKQ5lOImtdGeSXSljTwjp3SxVc2l4LfYU5GDu3vdQ2aS06f6bNm3C8OHD8dBDD9m918jISFRWVgq+/ujRo7j//vvtXtfefaxbtw7/+te/Oj1eWlqK+fPnO3JrOHr0KH755ReH3hMAamtr8e677wq6lvX16W0o00p6JJaMoDF7GvNI/MMgS5wHZfp2q9cazza1FUvzKGtrBnp6W8xWUVMc2xg2ApN7SDE9YiT6UtDOhM4kE0JciZBqLl1/h/emLmG+/7vvvot9+/bZfP6vJwsLC8O3337r0HsePXoUMpkMd9xxh0Pvqwtan376aYfetzeiTCvpkVgzgnf3j8b/JNyD9ePn4PSDq/He1CU2Z22Cl26CW0iUxWuMZ5va6+2oFBR7ye1ec9GQMRa/7+kRIztlusyhpjjtn8Q/dWQLxn+zAWtO7cLrWQex5tQujP9mA5Yf+crmT+B7M8rYE0K6G0s1177CXJQznnF96qmn8Ouvv2L27NnYuHEjqqurMXfuXMTFxWH8+PHIyWnvym/u8aqqKtxzzz0YPXo0nnzySfBmpgYY2r9/P6Kjo5GcnIzvvvtO/7i5NSoqKnD33XcjISEBTz75JCIiIgRlCV9//XUkJSUhKSkJ+fn5AIA9e/Zg3LhxGD16NO666y6Ul5frrz937hymTZuGIUOG4KOPPgIAFBQUICbGeq+DL774AnFxcRg1ahQefvhhs2sVFBTg/fffx8aNGxEfH4+0tDSz92xra8OqVaswduxYxMXF4YMPPgAAKJVKpKSkICEhAbGxsdi1axcAYPXq1bh27Rri4+OxatUqq3vWefPNNxETE4OYmBj8+9//BgD87W9/65C1XbduHd544w3966rb09q1awWvczuhoJX0SKwZwSn9hjnsTbDENxj916RBlrSgU6lwGye22lzJFpaaRwlp6KQT5m058KWmOMI5u3SMEEJI97ClvwOL999/H2FhYThy5AhWrlyJtWvXYvTo0cjJycE//vEPPPLIIwBg9vFXXnkFycnJyMrKwuzZs3Hjxg2L6zU3N+Pxxx/Hnj17kJaWhps3b+q/ZmmNadOm4ezZs5g3b57VNXR8fX2Rnp6OZ555Bs899xwAIDk5GadOnUJWVhYWLVqE//u//9Nfn5OTg7179+LkyZN49dVXUVpaKmidvLw8rF+/HocPH8a5c+fw1ltvmV0rMjISTz31FFauXIns7GxMmjTJ7H0/+eQT+Pn5ISMjAxkZGfjoo49w/fp1eHp6IjU1FWfPnsWRI0fwl7/8BTzPY8OGDRg8eDCys7Px+uuvC9p7ZmYm/vvf/+L06dM4deoUPvroI/1+t23bpr/um2++wYIFC3DgwAFcvXoV6enpyM7ORmZmJo4dOyZordsJlQeTHqm7x2ToZptqakqhPLtL38ipZeTd+PJ4KmptbBBlib0NnUTgBL0O1BRHGGeXjhFCCOke9vR3sMXx48exY8cOAMC0adNQVVWFuro6s48fO3ZMny2dOXMm/P39Ld7/0qVLGDhwIIYMae95sXTpUnz44YdW105NTQUA3HvvvVbX0Fm8eLH+/1euXAmgfcTQwoULUVZWhpaWlg4l0XPmzIGXlxe8vLwwdepUpKenIz4+3uo6hw8fxvz58xEUFAQACAgIsLqWEAcOHEBOTo6+PLmurg5Xr15FeHg4XnzxRRw7dgwikQglJSUdMsYsjh8/jnnz5sHbuz3R8MADDyAtLQ0rVqyAQqFAaWkpKioq4O/vjwEDBmDTpk04cOAARo9uH2eoVCpx9epVTJ482ab1XRUFraRH0mUE9xTkWL3WmRlBiX8Y5CnLOzy2c+ZyvHxqN/YV5tp87tYSXUMnVgN9A7G/MM/qeUtdUxxT34OYE2GEf19MChuCvQXne+3ZTVtKx3pzVpoQQm4nXd3fwVR5L8dxZh83/H+hzF3PsjbrOrp/fvbZZ/H8889j9uzZOHr0KNatW2d2X0K/L57nTV5raS2h93377bcxffr0Do9/9tlnqKioQGZmJtzc3BAZGWnzeBdLr+38+fPx7bff4ubNm1i0aJH++hdeeAFPPvmkTevdLqg8mPRYr42fjUifQIvXdEdGUNdQ5tSDq7F+/Bz8T8I9WBE3tUv3YMq1+krB5y2Nv4c/xU5BTEAYwPM4X12Kd3N/7tVnN51dOkYIIaT7dHV/h8mTJ2PLli0A2hsGBQUFwdfXV9Dj+/btQ01Njf5eKSkpKCkp6XD/6OhoXL9+HdeuXQMAfP3111bXTk5OxjfffAOgPftobQ0dXXnrtm3bMGHCBADt2cp+/foBAD7//PMO1+/atQvNzc2oqqrC0aNHMXbs2A5fLykpQUpK534dKSkp+Oabb1BV1V7xVF1dbXEtHx8fNDT8Noc+NTUVL7zwQqf7Tp8+He+99x5aW1sBAFeuXEFjYyPq6uoQHBwMNzc3HDlyBIWFhSbvC7S/3pZMnjwZO3fuhEqlQmNjI1JTU/Uly4sWLcLWrVvx7bff6jsoT58+HZ9++imUSqX+NVEoFBbXuB1R0Ep6LFcek2HYTdbP3QszImNg3/Qqx2E5b9lX6ouZkbHYW3AeudWlaEPHTwd769nNri4dI4QQ0nW6ur/DunXrcObMGcTFxWH16tX6YMvc42vXrsWxY8eQkJCAAwcOYMCAAQAArVaL/Px8famsjqenJz788EPMnDkTycnJiIiIsLr22rVrceDAASQkJGDfvn0IDQ2Fj4+P2TV01Go1xo0bh7feegsbN27Ur7FgwQJMmjRJX86rk5SUhJkzZ2L8+PF4+eWXERYW1uHrZWVlkEg6F46OHDkSa9aswZ133olRo0bh+eeft7jWrFmzkJqaqm/EdO3aNfj6dv65PfbYYxgxYgQSEhIQExODJ598EhqNBg899BDOnDmDMWPGYMuWLfrANDAwEBMnTkRMTAxWrVqFyspKq1nqhIQEPProo0hKSsK4cePw2GOP6Ut/R44ciYaGBvTr1w+hoe1jGO+55x4sWbIEEyZMQGxsLObPn98pUO4JOFvT+842ZswY/syZM929DdJDuMqYDHODyEUcB60L/l2cFRln9bzl8iNfCSrDFnKvnuLziyex5tQuwdevHz8Hy4ZPcOKOCCGECHXx4kUMHz7c4jW6ZnvW+ju40gzp3NxcfPrpp3jzzTftvpdarYZYLIZEIsHJkyexfPlyZGdnO3QNIf7zn/9gwIABmD3bsVVzS5cuxcaNG9GnTx+H3vf777/Hr7/+ihUrVjj0vrcLU3+3OI7L5Hl+jLXnUtBKSBcR8h84VyPhRDj94GqzAf5NVT3Gf7NBUCmsGBzSF77QK85usrwu1l5jQgghXUtI0Aq0/3fdVH8He+a93y6uXr2KBx98EFqtFu7u7nj33Xc7le4SYsyeoJUaMRHSRYR0k3U1uvOW5rKALGc328Djvxd+Qai3H2rVKsg9pD22UZOrNAIjhBDiPLr+Dq5SzdWVhgwZgqysrO7eBulFKGglpAuwdJN1NabOW+r+A836Pf3n/NEOf157ek+P/TSaRgMRQkjv0FfqS0c8CHEyCloJ6QIsGUlXY9iq39yZXFvpGjWdrypxqXM/jmBpNFBvKB0jhBBCCHEUCloJ6QKs3WRtxQFw5Cl1w1b9zjyTW9BQhZdP7e5xjZp6c+kYIYT0FpqaUijP7kJbYzXE3gGQJcyBxD/M+hMJIYJR0EpIF2AdRC4CB60N4edQeQgu15YzP88cw/OWzj6Tu68wF+Wq+h4ZzFHpGCGE9DyaegUUXz4L5dmdQJtG/7jiq+cgS5yH4KWbIPEN7sYdEtJz0JxWQroA6yDyLdP/iEBPb+Z1Hhg8GpE+gczPM8XwvGVXnMnVNX3Srff5xZN4K/sQPr94EjdV9U5dmxBCCGGhqVegaP0kKDO+7RCwAgDaNFCmb0fR+knQ1Cu6Z4MGCgoKEBMjbK6ssaNHj+KXX36xel12djZ++OEHm9aora3Fu+++a9NzHUUm676jOgUFBfjqq6+6bX1D3fk6WENBKyFdgHUQ+VeX01HV3Mi0hoQTYX5UAnbOXI5ZkXEQgbNlq5BwIsyKjOtwxrSrzuSWNtbiqSNbMP6bDVhzahdezzqINad2Yfw3G7D8yFeobFI6fQ+EEEKINYrNK9Banm/xmtbyfCg2O28eZ1tbm9PurdNbglZH0Wg01i8y4kpBqyujoJWQLvLa+NlWs6ABHt5YMnQsfig4z3x/XSmv7hzlqoR7mJ5/V/9orB8/B6cfXI33pi7p0CCoq87kbr16Bt8XnO8UIOsaNs3d+x4FroQQQrqVpqYUysxUQdcqM1OhqS1jun9BQQGio6OxbNkyxMXFYf78+VCp2v87HBkZiVdffRXJycnYvn07srOzMX78eMTFxWHevHmoqakBAGRmZmLUqFGYMGEC3nnnHf29P/vsMzzzzDP6P99///04evQoAGD//v1ISEjAqFGjkJKSgoKCArz//vvYuHEj4uPjkZaWZnK/LS0t+Pvf/45t27YhPj4e27ZtQ3p6Ou644w6MHj0ad9xxBy5fvgwAyMvLQ1JSEuLj4xEXF4erV69i9erVuHbtGuLj47Fq1SqLr80nn3yCoUOHYsqUKXj88cf130thYSFSUlIQFxeHlJQU3Lhxw+Lj169fx4QJEzB27Fi8/PLLgn4u5tZ+9NFH8fzzz2Pq1Kn429/+hsbGRvzhD3/A2LFjMXr0aOzatUv/c500aRISEhKQkJCg/zBg9erVSEtLQ3x8PDZu3Gh2feOM+b/+9S+sW7cOALBp0yaMGDECcXFxWLRoEQCY3YcQPM9j1apViImJQWxsLLZt2wYAWLhwYYcPJx599FHs2LEDbW1tWLVqFcaOHYu4uDh88MEHgtcSioJWQrqIhtdi8dCxGCYPgYgznQWtVjfioQOfoo3xPKup0SkLhiQylST/844HsGz4BJNnSlnP5NqCA6xml3UNmwghhJDuojy7q3NJsDltGigzdzKvcfnyZTzxxBPIycmBr69vh0ykp6cnjh8/jkWLFuGRRx7BP//5T+Tk5CA2NhavvPIKAOD3v/89Nm3ahJMnTwpar6KiAo8//jh27NiBc+fOYfv27YiMjMRTTz2FlStXIjs7G5MmTTL5XHd3d7z66qtYuHAhsrOzsXDhQkRHR+PYsWPIysrCq6++ihdffBEA8P777+PPf/4zsrOzcebMGYSHh2PDhg0YPHgwsrOz8frrr5vdY2lpKV577TWcOnUKBw8exKVLl/Rfe+aZZ/DII48gJycHDz30EFasWGHx8T//+c9Yvnw5MjIy0LdvX6uvj6W1AeDKlSv46aef8MYbb2D9+vWYNm0aMjIycOTIEaxatQqNjY0IDg7GwYMHcfbsWWzbtk2/lw0bNmDSpEnIzs7GypUrre7FlA0bNiArKws5OTl4//33AcDsPoT47rvvkJ2djXPnzuGnn37CqlWrUFZWhkWLFukD2JaWFhw6dAj33XcfPvnkE/j5+SEjIwMZGRn46KOPcP36dZu+F3MoaCXEySqblPqS1//N3I/LteXQ8uaDUtYGTMPkISbHxbCWJFtqgMRyJteYbUXK5ukaNhFCCCHdoa2xmvH6GuY1+vfvj4kTJwIAli5diuPHj+u/tnDhQgBAXV0damtrceeddwIAli1bhmPHjnV6/OGHH7a63qlTpzB58mQMHDgQABAQEMC8Z0N1dXVYsGABYmJisHLlSuTltfesmDBhAv7xj3/gn//8JwoLC+Hl5WXlTr9JT0/HnXfeiYCAALi5uWHBggX6r508eRJLlrRPIHj44Yf1r5e5x0+cOIHFixfrH7dnbQBYsGABxGIxAODAgQPYsGED4uPjMWXKFDQ3N+PGjRtobW3F448/jtjYWCxYsAAXLlwQ/L1bExcXh4ceegibN2+GRCKxuA8hjh8/jsWLF0MsFiMkJAR33nknMjIyMGPGDBw+fBhqtRr79u3D5MmT4eXlhQMHDuCLL75AfHw8xo0bh6qqKly9etVh3x9A3YMJcSpnjonReSR6vNlZn6+Nn42siiIUW/gPpqksrTFdALynIMfqfu4OH44p4UP1412SQiLx+OHNFl+DAA9vVKuFffqna9hE3XgJIYR0B7E3W0An9vZnXoMzqsgy/LO3t+VGjTzPd3q+jkQigVb72xGc5uZmq8+xxcsvv4ypU6ciNTUVBQUFmDJlCgBgyZIlGDduHPbu3Yvp06fj448/xqBBgwTdk7fwgb8xc9+L4eMs36+1tQ1/JjzPY8eOHRg2bFiHa9atW4eQkBCcO3cOWq0Wnp6egtcHzP/sAGDv3r04duwYdu/ejddeew15eXlm9yGEue/X09MTU6ZMwY8//oht27bpA3+e5/H2229j+vTpzGsJRZlWQpxo1YkdTg1YOUA/R9VYZZMSL53ahZuqOpNfF4Pr1HDJEiFnciN9AvF68u+wbPgErBg1DcuGT8DwgFB9cyjjbK2u6dPioWOsrm+orqWJ6XpCCCHEUWQJcwCxwLyPWAJZ4lzmNW7cuKEv7f3666+RnJzc6Ro/Pz/4+/vrz5p++eWXuPPOOyGXy+Hn56fPKm7ZskX/nMjISGRnZ0Or1aKoqAjp6ekA2jOgP//8s76ks7q6PZvs4+ODhoYG/fNTU1PxwgsvdNrL/2/vzuOirvbHj78OiwsqiPuSiXZNgWEARVwwlXChmxtqaZLL7fpN7WqPbo8wrWtWdqtfWuZe3nsVS8uFkswyTdPMrkSY5JIaaaC5sSgoASZwfn8Ac1lmhhn26P18PHzIzJzPOe/PZz4s7zlb6XIZGRl07NgRKJhHW+TcuXN07dqVxx9/nFGjRnHs2LEyxwL06NGjTBuBgYF8+eWXXL9+ndzcXD744APTa/3792fz5s2m8y26XpaeDwoKKvF8Zdoubfjw4axYscKU+B09etR0Tdq3b4+DgwPvvvuuaSGt0ud/8eJFQkJCytTbtm1bkpOTSUtL49atW+zcuRPA9F4GBwfz2muvkZ6eTmZmpsU4LNVf3MCBA9myZQt5eXmkpKRw8OBBAgMDAZg4cSLr16/nq6++MiWpw4cPZ82aNdy+fRsoGC5t61BkW0lPqxDVIDU7k6cORbH3l9PlF66Eps4NzQ7rtaWHt0PT5izqO8qmhBWgVeOmRN8/iwUxO9iVdKLEYklOyoH7Ohss1le0ONSVrBvsTjpp6oUN7exNWxdXNpyybc5NEbcGtg8nEkIIIaqSk3sHmvYKIzN2W7llm/YKw6l5e7vb8PT0ZMOGDcyYMYNu3boxa9Yss+U2bNjAzJkzycrKomvXrqxfvx6A9evX88gjj+Di4lKi9ysoKIguXbrg4+ODwWCgZ8+eALRu3Zq1a9cyduxY8vPzTfMvR44cyfjx4/noo49YsWIFZ8+exdW17N8dwcHBpqGo8+fPZ+7cuUydOpU33niDe++911Ruy5YtbNy4EWdnZ9q1a8dzzz1HixYtCAoKwmAwcN999/H000+b7enr2LEjzzzzDH369KFDhw54eXnh5uYGFCxE9Mgjj7B48WJat25tug6Wnl+2bBmTJk1i2bJljBs3ztRGamqq3W2XtmDBAp544gmMRiNaazw8PNi5cyePPfYY48aNY9u2bQQHB5t6Z41GI05OTvj6+jJt2jTuuece0xDf4pydnXnuuefo06cPXbp0MSXXeXl5PPzww2RkZKC15u9//zvNmze3GMfly5fN1l9cWFgYhw8fxtfXF6UUr732mmnu77Bhw5gyZQqjRo2iQYMGAEyfPp3ExER69uyJ1prWrVsTHW3/XG5rlD1d7TUpICBAx8XF1XYYQtikKBlLv5WFk4Mj757+xuqQ3KrigOLbCfPLJK6z9r9n01DekR5G1gRPMj0ufh7NG7owvLM37cwkxZaSz4q6knWDvltftWlbHSflwDcPzqtUe0IIIYQlp06dwtPT02qZon1arW1749z2T3R69iucXNvY1X5iYiIjRozgxInq3R+9Ih5++GGWLl1K69atq62NnTt3cu7cOdNCRcVlZmbStGlTcnNzCQsL45FHHiEsLKxetF1k5cqV3HnnnYwaZX3qVl2t3xpz31tKqSNa63KH3EnSKkQlFA3B/ayG9jE15599R5eY31mRBNBROZg9j/J6UKtSRRNtIYQQoirZkrRCQeKavPHxgu1viq8m7OhE015htHl4ud0JK9TtpLW2PfXUU+zdu5ecnByGDRvGsmXLqnQubl1tu76oTNIqw4OFqKCaWGTJFqXnd+62I4HO1flE/fQd7//4rdnzKNof9XjaRZvnvlbUor6jOJ520er1tGXRKCGEEKImOLm2ocNjmwv2bf3uI/J+vY5jE3ea9hpToSHBRTw8PCRhtWDJkiV/yLaFJK1CVNiCmB21nrBC2fmd6bey7Dr+w7NHyz2Pov1RKzKU2FaVmTMrhBBC1BYn9w40DzE/51QIUTUkaRWiAq5k3WBXUu1/CuqkHMqsHty8oYtddSSkJ9tU7tPE46z4fj83f8vh4KUETl2/Ql6xxHLhNx9XOrEsb8EmIYQQQgjxxyNJqxAVYM8Q3OrUuVlLPks6yfDCxHV30kkuZF7HAUU+5c9Xd1CKfBvnteeh+X/f7bb4elUOJW7n4ir7sAohhPhdyMjI4eTxK2Rn3aaxizPePu1wc7NvD04hhHWStApRAfYOwa0uZ2+k8GzMR/wj5iMAG9LUkrq5teFM+tUqjcncUGIhhBCivsm8eYvoD05w4vgV8vP/9xt4x/aTGIztGDPWQNNmDWsxQiHqD4faDkCI35vU7Ex2JZ2s7TBK0NifsHo0a8nYu/yrIxx2JZ3gataNaqlbCCGEqG2ZN2+xavnXHPv+comEFSA/X3Ms/jKrln9N5s1bVdbmtGnTiIqKKvP8pUuXGD9+fIXr9fDwIDU1tTKhVXkbL7/8sunr9PR0Vq9ebXqcmJiIwWAot47ly5fj6elJeHg4kZGRzJ49276ga1Hx86+KclWh+DWMjo7mhx9+qLG2oZJJq1KqhVLqc6VUQuH/7mbK+CmlDiulTiqljimlJlSmTSFqU9GKwSeuXartUCrMSTkw0sNI9P2zGPennjipqv/sKlfn81kdS+yFEEKIqhL94QnSUq2PukpLzSL6w+pf/6JDhw5mk9nfM2tJq61Wr17Np59+yqZNm6oyNLNyc3PLL2SHupi0Fve7S1qBecA+rXU3YF/h49KygClaa28gFHhTKdW8ku0KUSvqyorB9nJQisd8BvHPvqP55sF5rAmeRKvGTWnn4sp9ncv/tLIiSm/FI4QQQtQHGRk5nDh2xaayJ45d4UZGjt1tvPPOOxiNRnx9fZk8ebLp+YMHD9K/f3+6du1qSlSL9zxGRkYyevRoQkND6d69Oy+88IJN7S1evJjAwEACAwP56aefAPj444/p06cP/v7+DBkyhKtXC6YTpaSkMHToUHr27MmMGTPo3Lmzzb2o2dnZhIaG8q9//QuAjRs3EhgYiJ+fHzNmzCAvL4958+aRnZ2Nn58f4eHhzJs3j7Nnz+Ln50dERIRN7cycOZNz584xatQoli5dWuI1c+eVn5+Ph4cH6enppnJ/+tOfuHr1KklJSYSEhGA0GgkJCeH8+fNAQc/3k08+SXBwME8//bTFWA4cOMDAgQMJCwvDy8uLmTNnkp9fsC7K+++/j4+PDwaDwVRH6fMHGDNmDL169cLb25u1a9daLPfGG29gMBgwGAy8+eab5V6nefPm4eXlhdFo5KmnnrJ4fYr773//y44dO4iIiMDPz4+zZ8+W205VqGzSOhrYUPj1BmBM6QJa6x+11gmFX18CkoHWlWxXiBpXkRWDOzV1Z36vULo3b1tNUdkmX2s6NmnOVM9+ZVbhXdR3FC5ODaq8zdJb8QghhBD1wclSc1ityc/XnDhuW4Jrqv/kSf75z3/yxRdf8P3337Ns2TLTa5cvX+bQoUPs3LmTefPM9RVBbGwsmzZtIj4+nm3bthEXF1dum66ursTGxmWDc2sAACAASURBVDJ79myeeOIJAAYMGEBMTAxHjx5l4sSJvPbaawC88MIL3HvvvXz33XeEhYWZkrjyZGZmMnLkSCZNmsT//d//cerUKbZs2cLXX39NfHw8jo6ObNq0iVdffZXGjRsTHx9venzXXXcRHx/P4sWLbWrrrbfeokOHDuzfv5+///3vJV4zd14ODg6MHj2a7du3A/DNN9/g4eFB27ZtmT17NlOmTOHYsWOEh4fz+OOPm+r68ccf2bt3L6+//rrVeGJjY3n99dc5fvw4Z8+e5cMPP+TSpUs8/fTTfPHFF8THx/Ptt98SHR1d5vwB1q1bx5EjR4iLi2P58uWkpaWVKXfkyBHWr1/PN998Q0xMDP/61784evSoxZiuXbvG9u3bOXnyJMeOHeMf//iHxetTXP/+/Rk1ahSLFy8mPj6eu+66y6b3pLIquxBTW631ZQCt9WWlVBtrhZVSgUADoGZSciGqkL0rBvu06MC7wx6hVeOmTOgWwJhP1tRqL62lns9cnc9veVU7rMXcVjxCCCFEfZCdddu+8tn2lf/iiy8YP348rVq1AqBFixam18aMGYODgwNeXl5lesCKDB06lJYtWwIwduxYDh06REBAgNU2H3roIdP/RUneL7/8woQJE7h8+TK//fYbXbp0AeDQoUOm5C40NBR39zKzA80aPXo0c+fONfUK7tu3jyNHjtC7d2+goBe2TRurqUSVsHReEyZM4MUXX+Qvf/kLmzdvZsKEghmNhw8f5sMPPwRg8uTJzJ0711TXAw88gKOjY7ltBgYG0rVrV6DgGh86dAhnZ2cGDx5M69YFfXnh4eEcPHiQMWPK9AGyfPly0zW/cOECCQkJpve4yKFDhwgLC6NJkyZAwXv/1Vdf4e9vfv0SV1dXGjVqxPTp07n//vsZMWKE1etT28rtaVVK7VVKnTDzb7Q9DSml2gPvAn/R2vxf/kqpR5VScUqpuJSUFHuqF6La2bti8H0eBtO2L60aNyX6/lmM9DBWyxxSW1jq+ayO7Xvu62yQfVWFEELUS41dnO0r39i+8lprlFJmX2vYsGGJcuaUPtZSXZbKFH09Z84cZs+ezfHjx3n77bfJycmx2m55goKC2LVrl+l4rTVTp04lPj6e+Ph4zpw5w/PPP1+huu1h6bz69evHTz/9REpKCtHR0YwdO9bs8cWvVVGCWB5z74mt1/HAgQPs3buXw4cP8/333+Pv72+KuTh73xcnJydiY2MZN24c0dHRhIaGApavT20r969nrfUQrbXBzL+PgKuFyWhRUppsrg6llCvwCfAPrXWMlbbWaq0DtNYBRZ86CFFXNG/oYlf50kliq8ZNWRM8iZgH5/HPvqOZ5TOIoZ08Kf9XSeVZ6/ms6u17PJq1ZFHfUVVapxBCCFFXePu0w8HBtt/eDg4Kg087u+oPCQlh69atpKUVjM66du2aXcd//vnnXLt2jezsbKKjowkKCjLVe/HiRbPHbNmyxfR/v34F+6RnZGTQsWNHADZs2GAqO2DAALZu3QrAnj17uH79eonYLbXx4osv0rJlSx577DFT2aioKJKTk03nmZSUBICzszO3bxf0UDdr1oybN2+arfPixYuEhISUd0lKsHReSinCwsJ48skn8fT0NPVk9u/fn82bNwOwadMmBgwYYLbe2NhYpkyZYvG1n3/+mfz8fLZs2cKAAQPo06cPX375JampqeTl5fH+++8zaNCgMuefkZGBu7s7Li4unD59mpiY/6VSxcsNHDiQ6OhosrKy+PXXX9m+fTv33HMPYP59yczMJCMjgz//+c+8+eabxMfHW70+xVl7T6pLZbt8dgBTC7+eCnxUuoBSqgGwHXhHa72tku0JUWuGd/a2uZfUWpLYzsWVqZ79eDbgPgZ3vNvurWoqwlrPp73JuCXFVyUu6mEWQggh6hs3t0YYjLYlogZjO1zdGtlVv7e3N88++yyDBg3C19eXJ5980q7jBwwYwOTJk/Hz82PcuHEEBASQn5/PTz/9VGKocXG3bt2iT58+LFu2zLRw0fPPP88DDzzAPffcYxqqDLBw4UL27NlDz5492bVrF+3bt6dZs2bltgHw5ptvkpOTw9y5c/Hy8uKll15i2LBhGI1Ghg4dyuXLlwF49NFHMRqNhIeH07JlS4KCgjAYDGUWYrp8+TJOTvbNdrR0XlAwRHjjxo2mocFQMDR3/fr1GI1G3n333RJzjIs7f/48jRubH9XWr18/5s2bh8FgoEuXLoSFhdG+fXteeeUVgoOD8fX1pWfPnowePbrM+YeGhpKbm4vRaGTBggX07dvXVG/xcj179mTatGkEBgbSp08fpk+fjr+/v8X35ebNm4wYMQKj0cigQYPKfd+LmzhxIosXL8bf37/GFmJSFe3iB1BKtQS2AncC54EHtNbXlFIBwEyt9XSl1MPAeqD4/hfTtNbx1uoOCAjQtkwcF6Imzdr/Hh8nHiu33EgPI2uCJ5Vbbln8PhYf/bwqQrPIo1lLq4nklawb9N36qt1DhB1ReLVoz8COd9OhiRuhnb1lSLAQQojfvVOnTuHp6Wm1TNE+rda2vWnZyoW/PR5E02YNLZapapGRkcTFxbFy5coSz584cYJ169bxxhtvVLqNW7du4ejoiJOTE4cPH2bWrFnEx8dXaRu2WrlyJXfeeSejRtX+CK+IiAgmT56M0Wgs8fyBAwdYsmQJO3furJW4auN9scTc95ZS6ojW2vqkayq5EJPWOg0o0yevtY4Dphd+vRHYWJl2hKgrFvUdxfG0i1YXVLJneGxV9XKa46QcuK+zgUV9R1nt+Sza9saWZNynRQfu8zDg1qCxJKlCCCH+sJo2a8jfHg8i+sMTnDhWcjVhBweFwdiOMWMNNZqwWmMwGKosaTl//jwPPvgg+fn5NGjQwLR9TVW2YavZs2fXaHvW2LqycU2rjfelOlSqp7U6SU+rqKtSszNZELODXUknSvRO2pokFlfRXk5rHFBE9BzGg9162ZxUpmZnlru6cXk9tkIIIUR9YEtPa3EZGTmcPH6F7OzbNG7sjMHH/iHBQvwR1FpPqxB/REULKl3JusHupJNk/JZtteexqFz6rSyaN3RheGdv2hWWs6eX01b3e/gwxzfYrmOKVjeuqmRcCCGE+KNwc2tE/wEetR2GEPWaJK1CVFDRgkqWpGZn8o+Yj/is1JYyC7/5uEQSaMuQY3s8bmfCWsTeZFwIIYQQQoiaIEmrENXA2nDbXJ3Px4nHOJ520TTctqiXsyp6XGOvJuLZon2Fjy8vGRdCCCHE/+QlZ3JrXwL5GTk4uDWiYUg3HNvIyCQhqpIkrUJUgwUxO8rtOU28mcaCmB2sCZ5Eq8ZNWdhnBJ8mnSCvkvNbM37LrtTxQgghhChfXtqv3HxpHzn7EiC32O/uV76g0ZBuNHs2BMeWTWovQCHqkcru0yqEKOZK1g1WfP8FnyQet6n8rqQTXM26AcDupJOVTlgB3BqY3yOsKL4Npw6zLH4fG04d5kph20IIIYSwXV7ar1wLf4+c3WdKJqwAufnkfHaGa+HvkZf2q911p6ens3r16iqK1LLExEQMBoPZ1y5dusT48ePLraNpU/t6lF9++WW7yhcXGRnJpUuXyi33/PPPs2TJEgCee+459u7dC4CHhwepqakVbt/WOIq3acm0adOIiooq8/yBAwcYMWJEheKqqvOrq6SnVYgqYGn+anlydT6fJZ1kqmc/0m9Z3uvNVk7KgdDO3jbHV3p+rRBCCCHKd/Of+8g7n261TN75dG7+cx/N37BvD9GipPWxxx6rTIgVlpubS4cOHcwmVZX18ssv88wzz1To2MjISAwGAx06dLD5mBdffLFCbVU0jry8vGppU0hPqxCVVjR/dWfi8QptXfPO6RhSszOrZM/W+zobyiyaZC2+ovm1Yz5ZQ2p2ZqXbF0IIIeq7vORMcvYm2FQ2Z28CeSn2/X6dN28eZ8+exc/Pj4iICKBgD9DevXtjNBpZuHChqeyYMWPo1asX3t7erF27tty6jxw5gq+vL/369WPVqlWm5yMjI3nggQcYOXIkw4YNK9ELGxkZydixYwkNDaVbt27MnTu3TL2pqan069ePTz75xOp5ZWdn4+fnR3h4uMX48/LymDZtGgaDAR8fH5YuXUpUVBRxcXGEh4fj5+dHdrZtU6HM9WhmZ2cTGhpq2l9248aNBAYG4ufnx4wZM8jLy7NYn7k4PDw8ePHFFxkwYADbtm2z2Ita2t69e7nnnnu4++672blzZ5nXY2Nj6d+/P/7+/vTv358zZ86Yrs9TTz2Fj48PRqORFStWWD2/+kJ6WoWoJFvmr1pzJv0qYz5Zw9p7H8ZJOVR4z1aPZi1Z1Lfsp7n2zq8VQgghhGW3Ss9htSY3n1t7E3B5yN/m+l999VVOnDhBfHw8AHv27CEhIYHY2Fi01owaNYqDBw8ycOBA1q1bR4sWLcjOzqZ3796MGzeOli1bWqz7L3/5CytWrGDQoEGmhLjI4cOHOXbsGC1atCAxMbHEa/Hx8Rw9epSGDRvSvXt35syZQ6dOnQC4evUqo0aN4qWXXmLo0KFWz2vlypWm8wLMxp+YmMjFixc5ceIEUNDz3Lx5c1auXMmSJUsICCh3S0+LMjMzmThxIlOmTGHKlCmcOnWKLVu28PXXX+Ps7Mxjjz3Gpk2bmDJlitnjx48fbzaORo0acejQIQA+++wzm2JJTEzkyy+/5OzZswQHB/PTTz+VeL1Hjx4cPHgQJycn9u7dyzPPPMMHH3zA2rVr+fnnnzl69ChOTk5cu3bN4vnVJ5K0CmGn4vuuOigHPrVx/qo1iTfTWPLd57Ru3IzLWRl2HeugFCF39GBx0LgyQ3yvZN1gV9IJm+opml8r29sIIYQQluVn5FRr+dL27NnDnj178PcvSHwzMzNJSEhg4MCBLF++nO3btwNw4cIFEhISLCatGRkZpKenM2jQIAAmT57Mrl27TK8PHTqUFi1amD02JCQENzc3ALy8vEhKSqJTp07cvn2bkJAQVq1aZarXHubi7969O+fOnWPOnDncf//9DBs2zO56LRk9ejRz58419fTu27ePI0eO0Lt3b6Cgl7JNmzZ21zthwgS7j3nwwQdxcHCgW7dudO3aldOnT5d4PSMjg6lTp5KQkIBSitu3bwMFPbQzZ87EyakgjSv+npU+v/pEklYhbFTReau22nPhB5vKNXZyJif3Nrrwcb7W7P/lDAtidpSZm7rbjliLz68VQgghhHkObo2qtXxpWmvmz5/PjBkzSjx/4MAB9u7dy+HDh3FxcWHw4MHk5FhOkLXWKKUsvt6kieWVjhs2bGj62tHRkdzcXACcnJzo1asXu3fvtjtptRS/u7s733//Pbt372bVqlVs3bqVdevW2VW3JUFBQezatYtJkyahlEJrzdSpU3nllVcqVa+1a2dJ6fei9OMFCxYQHBzM9u3bSUxMZPDgwYD197H0+dUnMqdVCBtUdt5qVXFUDmQXS1iLWJqbau/iTrJdjhBCCGFdw5Bu4GTjn9BODjQc0s2u+ps1a8bNmzdNj4cPH866devIzCz4/X7x4kWSk5PJyMjA3d0dFxcXTp8+TUxMjOmYKVOmEBsbW6Le5s2b4+bmZhrGumnTJrviMkcpxbp16zh9+jSvvvqq6fkePXqYLe/s7GzqMbQUf2pqKvn5+YwbN45Fixbx3XffAWWvy/z58029tLZ68cUXadmypWmRq5CQEKKiokhOTgbg2rVrJCUlAeavobk4rLEW47Zt28jPz+fs2bOcO3eO7t27l3g9IyODjh07AgXziosMGzaMt956y/TBQfHhwaXPrz6RpFUIG1R23mpVKW9LnKK5qUXsXdzJ2nY5QgghhADHNk1pZGMi2mhINxxb27c6f8uWLQkKCsJgMBAREcGwYcOYNGkS/fr1w8fHh/Hjx3Pz5k1CQ0PJzc3FaDSyYMEC+vbta6rj2LFjtG/fvkzd69ev529/+xv9+vWjceOq+Z3v6OjI5s2b2b9/P6tXryY1NRWtS3+8XuDRRx/FaDQSHh5uMf6LFy8yePBg/Pz8mDZtmqkXdNq0acycOdO0ANLx48dp166d3fG++eab5OTkMHfuXLy8vHjppZcYNmwYRqORoUOHcvnyZcDyNSwdhzXWYuzevTuDBg3ivvvu46233qJRo5I98nPnzmX+/PkEBQWVWBxq+vTp3HnnnRiNRnx9fXnvvfcsnl99oizdVLUtICBAx8XF1XYYQnAl6wZ9t75aqz2s9nBSDnzz4DzaurjaFXvx44QQQog/qlOnTuHp6Wm1TNE+rda2vXG8szktNk3CsaX9Q0cr48aNG/z1r39l27ZtNdpukZ07d3Lu3Dkef/zxam1n+PDh7N69u1rqrqprWJ0x/h6Z+95SSh3RWpe7upb0tApRDnvmhdYFRXNTAdq5uHJfZ/Mbh5dmbrscIYQQQpTl2LIJLTZNolFo97JDhZ0caBTavVYSVgBXV9daS1gBRowYUe0JK1CtyWBVXUNJWKuOLMQkRDnsnRdaFxSfm7qo7yiOp120OrzZ0nY5QgghhDDPsWUTmr8xirzkTG7tSyA/IwcHt0Y0rMCQYCGEdZK0ClEOe+eFFuekHLj3jh6cun6ZC5nXqzAq64rPTW3VuCnR989iQcwOdiWdKNFr7KQcuK+zocyqw0IIIYSwjWObpnbtwyqEsJ8krUKUY3hnbxZ+87FNQ4QdlQNP+Q9Fo3Fr0JjQzt60dXElNTvTbNJYHZyUA6GdvUs816pxU9YETzLtMZvxW3aJ+IQQQgghhKirJGkVohxF80I/TjxWbtk/dzYwxze4zPOlk8b9F8+w98JpMzVY1sSpAb/m/lZuOWtzU9u5uMo+rEIIIUQVSs+6SvzF3fx6K50mDZvj13E4zV3a1nZYQtQrkrQKYYOqmhdalDQO7+xt14rEQzt5Mr9XKI/se0fmpgohhBB1wI2cVDbHPcfRX3aTr3NNz2858gL+nUKZ2OsFXBu1qsUIhag/ZPVgIWxQNC90pIcRJ1Xy28ZJOTDSw0j0/bNsnhdqz6q+Q+/wZP2Qqdzt3rZKYxBCCCFExdzISWXx5+M4cuGTEgkrQL7O5cj5nSz+fBw3clKrPZaUlBT69OmDv78/X331Fdu2bcPT05Pg4LIjv2zx8ssvVziWyMhILl26VOHjq8qBAwcYMWKE2dc8PDxITa2a96Vp05r7m+v06dP4+fnh7+/P2bNna7TtukB6WoWwUVXPC7W193bxgHHVFoMQQggh7Lf5yEKSMxOtlknOTGTzkYU8GrSqWmPZt28fPXr0YMOGDQCEhoayevXqSiWtzzzzTIWOjYyMxGAw0KFDhwodLyyLjo5m9OjRvPDCC9XeVl5eHo6OjtXejj2kp1UIOxUN8X3c916mevarcLJYmd7bqopBCCGEEPZJz7rK0Quf2VT26IXPyMi+ancb77zzDkajEV9fXyZPngxAUlISISEhGI1GQkJCOH/+PPHx8cydO5dPP/0UPz8/XnjhBQ4dOsTMmTOJiIggLy+PiIgIevfujdFo5O2337ba7rx588jOzsbPz4/w8HAAxowZQ69evfD29mbt2rVAQVIzbdo0DAYDPj4+LF26lKioKOLi4ggPD8fPz4/s7GyL7Vy9epWwsDB8fX3x9fXlv//9L4mJiRgM/xuFtmTJEp5//nkABg8ezBNPPEH//v0xGAzExsaWew1v3LhBWFgYXl5ezJw5k/z8slOyNm7cSGBgIH5+fsyYMYO8vDygoAf12WefxdfXl759+3L1asF7+PPPP9OvXz969+7NggULyo1hzZo1zJ071/Q4MjKSOXPmWG3bnE8//ZQ333yTf//732U+jMjMzCQkJISePXvi4+PDRx99BMDTTz/N6tWrTeWef/55Xn/9dbTWREREmN67LVu2AAW908HBwUyaNAkfH59yz63Gaa3r5L9evXppIf4oLv+aoSN/+K9eFr9PR/7wX33l14zaDkkIIYT4Q/rhhx+svr7/xw360ffutPnf/h832NX+iRMn9N13361TUlK01lqnpaVprbUeMWKEjoyM1Fpr/Z///EePHj1aa631+vXr9d/+9jfT8YMGDdLffvut1lrrt99+Wy9atEhrrXVOTo7u1auXPnfunNX2mzRpUuJxUftZWVna29tbp6am6ri4OD1kyBBTmevXr5dp25oHH3xQL126VGutdW5urk5PT9c///yz9vb2NpVZvHixXrhwoane6dOna621/vLLL0uUM2f//v26YcOG+uzZszo3N1cPGTJEb9u2TWutdefOnXVKSor+4Ycf9IgRI/Rvv/2mtdZ61qxZesOGgvcK0Dt27NBaax0REWG6hiNHjjSVWblyZZlrVVpycrK+6667TI9DQ0P1V199ZbVtSxYuXKgXL15selzU9u3bt3VGRsHfjSkpKfquu+7S+fn5+rvvvtMDBw40lff09NRJSUk6KipKDxkyROfm5uorV67oTp066UuXLun9+/drFxeXcu+PyjD3vQXEaRtyQxkeLEQdIKv6CiGEEL8Pv95Kt6t81m8ZdpX/4osvGD9+PK1aFSzi1KJFCwAOHz7Mhx9+CMDkyZNL9OBZsmfPHo4dO0ZUVBQAGRkZJCQk0KVLF5vjWb58Odu3bwfgwoULJCQk0L17d86dO8ecOXO4//77GTZsmN3n+M477wDg6OiIm5sb169b38/+oYceAmDgwIHcuHGD9PR0mjdvbrF8YGAgXbt2NR176NAhxo8fb3p9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\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "pca = decomposition.PCA(n_components=2)\n",
    "tfidf_matrix_np=tfidf_matrix.toarray()\n",
    "pca.fit(tfidf_matrix_np)\n",
    "X = pca.transform(tfidf_matrix_np)\n",
    "\n",
    "xs, ys = X[:, 0], X[:, 1]\n",
    "\n",
    "#set up colors per clusters using a dict\n",
    "cluster_colors = {0: '#1b9e77', 1: '#d95f02', 2: '#7570b3', 3: '#e7298a', 4: '#66a61e'}\n",
    "#set up cluster names using a dict\n",
    "cluster_names = {}\n",
    "for i in range(num_clusters):\n",
    "    cluster_names[i] = \", \".join(Cluster_keywords_summary[i])\n",
    "\n",
    "%matplotlib inline \n",
    "\n",
    "#create data frame with PCA cluster results\n",
    "df = pd.DataFrame(dict(x=xs, y=ys, label=clusters)) \n",
    "groups = df.groupby(clusters)\n",
    "\n",
    "# set up plot\n",
    "fig, ax = plt.subplots(figsize=(16, 9))\n",
    "#Set color for each cluster/group\n",
    "for name, group in groups:\n",
    "    ax.plot(group.x, group.y, marker='o', linestyle='', ms=12, \n",
    "            label=cluster_names[name], color=cluster_colors[name], \n",
    "            mec='none')\n",
    "\n",
    "ax.legend(numpoints=1,loc=4)  #show legend with only 1 point, position is right bottom.\n",
    "\n",
    "plt.show() #show the plot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Topic Modeling - Latent Dirichlet Allocation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use LDA for clustering\n",
    "lda = LatentDirichletAllocation(n_components=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "In total, there are 998 reviews and 500 terms.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# LDA requires integer values\n",
    "tfidf_model_lda = CountVectorizer(max_df=0.99, max_features=500,\n",
    "                                 min_df=0.01, stop_words='english',\n",
    "                                 tokenizer=tokenization_and_stemming, ngram_range=(1,1))\n",
    "\n",
    "tfidf_matrix_lda = tfidf_model_lda.fit_transform(df_train) #fit the vectorizer to synopses\n",
    "\n",
    "print (\"In total, there are \" + str(tfidf_matrix_lda.shape[0]) + \\\n",
    "      \" reviews and \" + str(tfidf_matrix_lda.shape[1]) + \" terms.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(998, 5)\n",
      "[[0.01214492 0.52803395 0.01199091 0.01209491 0.4357353 ]\n",
      " [0.7696532  0.01711615 0.01759627 0.01702673 0.17860765]\n",
      " [0.4901289  0.13993137 0.3445366  0.01261482 0.01278831]\n",
      " ...\n",
      " [0.01149953 0.0113298  0.01137877 0.01127877 0.95451314]\n",
      " [0.00677653 0.18371469 0.19228331 0.00680009 0.61042537]\n",
      " [0.02246957 0.7196846  0.21254152 0.02274772 0.02255658]]\n"
     ]
    }
   ],
   "source": [
    "# document topic matrix for tfidf_matrix_lda\n",
    "lda_output = lda.fit_transform(tfidf_matrix_lda)\n",
    "print(lda_output.shape)\n",
    "print(lda_output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5, 500)\n",
      "[[ 0.22541745  4.83746501 14.13900697 ...  1.92847645  4.99276185\n",
      "   4.23765319]\n",
      " [ 4.95790283  0.20149554 17.31856793 ...  0.20159287 25.09740836\n",
      "   0.20157285]\n",
      " [ 2.84618548 11.47573304 15.56623822 ...  6.49679982  6.79227498\n",
      "   5.6618071 ]\n",
      " [ 8.42650879  1.55897476  6.75833823 ...  8.6791648  10.69186569\n",
      "   2.65269436]\n",
      " [ 5.54398545  9.92633165  5.21784865 ...  0.69396606 34.42568912\n",
      "   5.2462725 ]]\n"
     ]
    }
   ],
   "source": [
    "# topics and words matrix\n",
    "topic_word = lda.components_\n",
    "print(topic_word.shape)\n",
    "print(topic_word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Topic0</th>\n",
       "      <th>Topic1</th>\n",
       "      <th>Topic2</th>\n",
       "      <th>Topic3</th>\n",
       "      <th>Topic4</th>\n",
       "      <th>topic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Doc0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.44</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Doc1</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Doc2</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Doc3</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.02</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Doc4</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.03</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Doc5</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.01</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Doc6</td>\n",
       "      <td>0.95</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Doc7</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.91</td>\n",
       "      <td>0.02</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Doc8</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.84</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Doc9</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.72</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Topic0  Topic1  Topic2  Topic3  Topic4  topic\n",
       "Doc0    0.01    0.53    0.01    0.01    0.44      1\n",
       "Doc1    0.77    0.02    0.02    0.02    0.18      0\n",
       "Doc2    0.49    0.14    0.34    0.01    0.01      0\n",
       "Doc3    0.02    0.45    0.02    0.48    0.02      3\n",
       "Doc4    0.03    0.03    0.03    0.90    0.03      3\n",
       "Doc5    0.40    0.01    0.01    0.57    0.01      3\n",
       "Doc6    0.95    0.01    0.01    0.01    0.01      0\n",
       "Doc7    0.02    0.02    0.02    0.91    0.02      3\n",
       "Doc8    0.04    0.04    0.04    0.04    0.84      4\n",
       "Doc9    0.02    0.22    0.02    0.02    0.72      4"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# column names\n",
    "topic_names = [\"Topic\" + str(i) for i in range(lda.n_components)]\n",
    "\n",
    "# index names\n",
    "doc_names = [\"Doc\" + str(i) for i in range(len(df_train))]\n",
    "\n",
    "df_document_topic = pd.DataFrame(np.round(lda_output, 2), columns=topic_names, index=doc_names)\n",
    "\n",
    "# get dominant topic for each document\n",
    "topic = np.argmax(df_document_topic.values, axis=1)\n",
    "df_document_topic['topic'] = topic\n",
    "\n",
    "df_document_topic.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>topic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>151</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   topic\n",
       "2    242\n",
       "3    224\n",
       "1    197\n",
       "4    184\n",
       "0    151"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_document_topic['topic'].value_counts().to_frame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.22541745  4.83746501 14.13900697 ...  1.92847645  4.99276185\n",
      "   4.23765319]\n",
      " [ 4.95790283  0.20149554 17.31856793 ...  0.20159287 25.09740836\n",
      "   0.20157285]\n",
      " [ 2.84618548 11.47573304 15.56623822 ...  6.49679982  6.79227498\n",
      "   5.6618071 ]\n",
      " [ 8.42650879  1.55897476  6.75833823 ...  8.6791648  10.69186569\n",
      "   2.65269436]\n",
      " [ 5.54398545  9.92633165  5.21784865 ...  0.69396606 34.42568912\n",
      "   5.2462725 ]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abl</th>\n",
       "      <th>absolut</th>\n",
       "      <th>actual</th>\n",
       "      <th>ad</th>\n",
       "      <th>add</th>\n",
       "      <th>addict</th>\n",
       "      <th>addit</th>\n",
       "      <th>advertis</th>\n",
       "      <th>aftertast</th>\n",
       "      <th>agav</th>\n",
       "      <th>...</th>\n",
       "      <th>wish</th>\n",
       "      <th>wo</th>\n",
       "      <th>wonder</th>\n",
       "      <th>work</th>\n",
       "      <th>world</th>\n",
       "      <th>worth</th>\n",
       "      <th>wrap</th>\n",
       "      <th>wrong</th>\n",
       "      <th>year</th>\n",
       "      <th>yummi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Topic0</td>\n",
       "      <td>0.225417</td>\n",
       "      <td>4.837465</td>\n",
       "      <td>14.139007</td>\n",
       "      <td>0.202263</td>\n",
       "      <td>9.098033</td>\n",
       "      <td>3.342418</td>\n",
       "      <td>0.203602</td>\n",
       "      <td>10.085827</td>\n",
       "      <td>2.230230</td>\n",
       "      <td>0.200924</td>\n",
       "      <td>...</td>\n",
       "      <td>4.042240</td>\n",
       "      <td>9.371000</td>\n",
       "      <td>11.454961</td>\n",
       "      <td>0.205329</td>\n",
       "      <td>0.209072</td>\n",
       "      <td>0.201181</td>\n",
       "      <td>2.597459</td>\n",
       "      <td>1.928476</td>\n",
       "      <td>4.992762</td>\n",
       "      <td>4.237653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Topic1</td>\n",
       "      <td>4.957903</td>\n",
       "      <td>0.201496</td>\n",
       "      <td>17.318568</td>\n",
       "      <td>11.415599</td>\n",
       "      <td>14.191448</td>\n",
       "      <td>0.208872</td>\n",
       "      <td>10.315661</td>\n",
       "      <td>0.202648</td>\n",
       "      <td>0.205110</td>\n",
       "      <td>14.196846</td>\n",
       "      <td>...</td>\n",
       "      <td>10.511393</td>\n",
       "      <td>3.921782</td>\n",
       "      <td>12.226462</td>\n",
       "      <td>28.282914</td>\n",
       "      <td>4.680317</td>\n",
       "      <td>0.206906</td>\n",
       "      <td>0.201170</td>\n",
       "      <td>0.201593</td>\n",
       "      <td>25.097408</td>\n",
       "      <td>0.201573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Topic2</td>\n",
       "      <td>2.846185</td>\n",
       "      <td>11.475733</td>\n",
       "      <td>15.566238</td>\n",
       "      <td>0.203132</td>\n",
       "      <td>0.203651</td>\n",
       "      <td>12.754756</td>\n",
       "      <td>3.266854</td>\n",
       "      <td>2.305582</td>\n",
       "      <td>4.020992</td>\n",
       "      <td>0.200002</td>\n",
       "      <td>...</td>\n",
       "      <td>8.748733</td>\n",
       "      <td>1.810730</td>\n",
       "      <td>9.520617</td>\n",
       "      <td>0.203364</td>\n",
       "      <td>7.744645</td>\n",
       "      <td>9.365518</td>\n",
       "      <td>0.201026</td>\n",
       "      <td>6.496800</td>\n",
       "      <td>6.792275</td>\n",
       "      <td>5.661807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Topic3</td>\n",
       "      <td>8.426509</td>\n",
       "      <td>1.558975</td>\n",
       "      <td>6.758338</td>\n",
       "      <td>2.795634</td>\n",
       "      <td>2.994754</td>\n",
       "      <td>10.488655</td>\n",
       "      <td>0.201814</td>\n",
       "      <td>0.202085</td>\n",
       "      <td>3.351552</td>\n",
       "      <td>0.200375</td>\n",
       "      <td>...</td>\n",
       "      <td>6.491640</td>\n",
       "      <td>15.693237</td>\n",
       "      <td>3.727411</td>\n",
       "      <td>21.929185</td>\n",
       "      <td>0.207084</td>\n",
       "      <td>11.256612</td>\n",
       "      <td>13.798575</td>\n",
       "      <td>8.679165</td>\n",
       "      <td>10.691866</td>\n",
       "      <td>2.652694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Topic4</td>\n",
       "      <td>5.543985</td>\n",
       "      <td>9.926332</td>\n",
       "      <td>5.217849</td>\n",
       "      <td>23.383371</td>\n",
       "      <td>36.512115</td>\n",
       "      <td>0.205299</td>\n",
       "      <td>6.012069</td>\n",
       "      <td>0.203857</td>\n",
       "      <td>3.192117</td>\n",
       "      <td>0.201852</td>\n",
       "      <td>...</td>\n",
       "      <td>0.205993</td>\n",
       "      <td>0.203251</td>\n",
       "      <td>24.070549</td>\n",
       "      <td>21.379208</td>\n",
       "      <td>3.158882</td>\n",
       "      <td>3.969784</td>\n",
       "      <td>0.201770</td>\n",
       "      <td>0.693966</td>\n",
       "      <td>34.425689</td>\n",
       "      <td>5.246272</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 500 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             abl    absolut     actual         ad        add     addict  \\\n",
       "Topic0  0.225417   4.837465  14.139007   0.202263   9.098033   3.342418   \n",
       "Topic1  4.957903   0.201496  17.318568  11.415599  14.191448   0.208872   \n",
       "Topic2  2.846185  11.475733  15.566238   0.203132   0.203651  12.754756   \n",
       "Topic3  8.426509   1.558975   6.758338   2.795634   2.994754  10.488655   \n",
       "Topic4  5.543985   9.926332   5.217849  23.383371  36.512115   0.205299   \n",
       "\n",
       "            addit   advertis  aftertast       agav  ...       wish         wo  \\\n",
       "Topic0   0.203602  10.085827   2.230230   0.200924  ...   4.042240   9.371000   \n",
       "Topic1  10.315661   0.202648   0.205110  14.196846  ...  10.511393   3.921782   \n",
       "Topic2   3.266854   2.305582   4.020992   0.200002  ...   8.748733   1.810730   \n",
       "Topic3   0.201814   0.202085   3.351552   0.200375  ...   6.491640  15.693237   \n",
       "Topic4   6.012069   0.203857   3.192117   0.201852  ...   0.205993   0.203251   \n",
       "\n",
       "           wonder       work     world      worth       wrap     wrong  \\\n",
       "Topic0  11.454961   0.205329  0.209072   0.201181   2.597459  1.928476   \n",
       "Topic1  12.226462  28.282914  4.680317   0.206906   0.201170  0.201593   \n",
       "Topic2   9.520617   0.203364  7.744645   9.365518   0.201026  6.496800   \n",
       "Topic3   3.727411  21.929185  0.207084  11.256612  13.798575  8.679165   \n",
       "Topic4  24.070549  21.379208  3.158882   3.969784   0.201770  0.693966   \n",
       "\n",
       "             year     yummi  \n",
       "Topic0   4.992762  4.237653  \n",
       "Topic1  25.097408  0.201573  \n",
       "Topic2   6.792275  5.661807  \n",
       "Topic3  10.691866  2.652694  \n",
       "Topic4  34.425689  5.246272  \n",
       "\n",
       "[5 rows x 500 columns]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# topic word matrix\n",
    "print(lda.components_)\n",
    "# topic-word matrix\n",
    "df_topic_words = pd.DataFrame(lda.components_)\n",
    "\n",
    "# column and index\n",
    "df_topic_words.columns = tfidf_model_lda.get_feature_names()\n",
    "df_topic_words.index = topic_names\n",
    "\n",
    "df_topic_words.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word 0</th>\n",
       "      <th>Word 1</th>\n",
       "      <th>Word 2</th>\n",
       "      <th>Word 3</th>\n",
       "      <th>Word 4</th>\n",
       "      <th>Word 5</th>\n",
       "      <th>Word 6</th>\n",
       "      <th>Word 7</th>\n",
       "      <th>Word 8</th>\n",
       "      <th>Word 9</th>\n",
       "      <th>Word 10</th>\n",
       "      <th>Word 11</th>\n",
       "      <th>Word 12</th>\n",
       "      <th>Word 13</th>\n",
       "      <th>Word 14</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Topic 0</td>\n",
       "      <td>chocol</td>\n",
       "      <td>like</td>\n",
       "      <td>tast</td>\n",
       "      <td>flavor</td>\n",
       "      <td>eat</td>\n",
       "      <td>love</td>\n",
       "      <td>great</td>\n",
       "      <td>realli</td>\n",
       "      <td>product</td>\n",
       "      <td>bar</td>\n",
       "      <td>food</td>\n",
       "      <td>cooki</td>\n",
       "      <td>tri</td>\n",
       "      <td>littl</td>\n",
       "      <td>babi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Topic 1</td>\n",
       "      <td>tea</td>\n",
       "      <td>tast</td>\n",
       "      <td>use</td>\n",
       "      <td>sugar</td>\n",
       "      <td>like</td>\n",
       "      <td>drink</td>\n",
       "      <td>good</td>\n",
       "      <td>organ</td>\n",
       "      <td>great</td>\n",
       "      <td>make</td>\n",
       "      <td>product</td>\n",
       "      <td>better</td>\n",
       "      <td>tri</td>\n",
       "      <td>energi</td>\n",
       "      <td>water</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Topic 2</td>\n",
       "      <td>chip</td>\n",
       "      <td>flavor</td>\n",
       "      <td>kettl</td>\n",
       "      <td>bag</td>\n",
       "      <td>potato</td>\n",
       "      <td>like</td>\n",
       "      <td>tast</td>\n",
       "      <td>salt</td>\n",
       "      <td>brand</td>\n",
       "      <td>spici</td>\n",
       "      <td>great</td>\n",
       "      <td>good</td>\n",
       "      <td>tri</td>\n",
       "      <td>love</td>\n",
       "      <td>vinegar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Topic 3</td>\n",
       "      <td>bag</td>\n",
       "      <td>order</td>\n",
       "      <td>good</td>\n",
       "      <td>coffe</td>\n",
       "      <td>product</td>\n",
       "      <td>amazon</td>\n",
       "      <td>price</td>\n",
       "      <td>box</td>\n",
       "      <td>like</td>\n",
       "      <td>tast</td>\n",
       "      <td>buy</td>\n",
       "      <td>pack</td>\n",
       "      <td>time</td>\n",
       "      <td>flavor</td>\n",
       "      <td>ship</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Topic 4</td>\n",
       "      <td>food</td>\n",
       "      <td>love</td>\n",
       "      <td>like</td>\n",
       "      <td>use</td>\n",
       "      <td>flavor</td>\n",
       "      <td>hot</td>\n",
       "      <td>dog</td>\n",
       "      <td>tri</td>\n",
       "      <td>cat</td>\n",
       "      <td>tea</td>\n",
       "      <td>sauc</td>\n",
       "      <td>mix</td>\n",
       "      <td>product</td>\n",
       "      <td>great</td>\n",
       "      <td>make</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Word 0  Word 1 Word 2  Word 3   Word 4  Word 5 Word 6  Word 7  \\\n",
       "Topic 0  chocol    like   tast  flavor      eat    love  great  realli   \n",
       "Topic 1     tea    tast    use   sugar     like   drink   good   organ   \n",
       "Topic 2    chip  flavor  kettl     bag   potato    like   tast    salt   \n",
       "Topic 3     bag   order   good   coffe  product  amazon  price     box   \n",
       "Topic 4    food    love   like     use   flavor     hot    dog     tri   \n",
       "\n",
       "          Word 8 Word 9  Word 10 Word 11  Word 12 Word 13  Word 14  \n",
       "Topic 0  product    bar     food   cooki      tri   littl     babi  \n",
       "Topic 1    great   make  product  better      tri  energi    water  \n",
       "Topic 2    brand  spici    great    good      tri    love  vinegar  \n",
       "Topic 3     like   tast      buy    pack     time  flavor     ship  \n",
       "Topic 4      cat    tea     sauc     mix  product   great     make  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print top n keywords for each topic\n",
    "def print_topic_words(tfidf_model, lda_model, n_words):\n",
    "    words = np.array(tfidf_model.get_feature_names())\n",
    "    topic_words = []\n",
    "    # for each topic, we have words weight\n",
    "    for topic_words_weights in lda_model.components_:\n",
    "        top_words = topic_words_weights.argsort()[::-1][:n_words]\n",
    "        topic_words.append(words.take(top_words))\n",
    "    return topic_words\n",
    "\n",
    "topic_keywords = print_topic_words(tfidf_model=tfidf_model_lda, lda_model=lda, n_words=15)        \n",
    "\n",
    "df_topic_words = pd.DataFrame(topic_keywords)\n",
    "df_topic_words.columns = ['Word '+str(i) for i in range(df_topic_words.shape[1])]\n",
    "df_topic_words.index = ['Topic '+str(i) for i in range(df_topic_words.shape[0])]\n",
    "df_topic_words"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part two: Sentimental Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sa = reviews.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>Helpful %</th>\n",
       "      <th>% Upvote</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>B001E4KFG0</td>\n",
       "      <td>A3SGXH7AUHU8GW</td>\n",
       "      <td>delmartian</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1303862400</td>\n",
       "      <td>Good Quality Dog Food</td>\n",
       "      <td>I have bought several of the Vitality canned d...</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>80-100%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>B00813GRG4</td>\n",
       "      <td>A1D87F6ZCVE5NK</td>\n",
       "      <td>dll pa</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1346976000</td>\n",
       "      <td>Not as Advertised</td>\n",
       "      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>Empty</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>B000LQOCH0</td>\n",
       "      <td>ABXLMWJIXXAIN</td>\n",
       "      <td>Natalia Corres \"Natalia Corres\"</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1219017600</td>\n",
       "      <td>\"Delight\" says it all</td>\n",
       "      <td>This is a confection that has been around a fe...</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>80-100%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>B000UA0QIQ</td>\n",
       "      <td>A395BORC6FGVXV</td>\n",
       "      <td>Karl</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1307923200</td>\n",
       "      <td>Cough Medicine</td>\n",
       "      <td>If you are looking for the secret ingredient i...</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>80-100%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>B006K2ZZ7K</td>\n",
       "      <td>A1UQRSCLF8GW1T</td>\n",
       "      <td>Michael D. Bigham \"M. Wassir\"</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1350777600</td>\n",
       "      <td>Great taffy</td>\n",
       "      <td>Great taffy at a great price.  There was a wid...</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>Empty</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id   ProductId          UserId                      ProfileName  \\\n",
       "0   1  B001E4KFG0  A3SGXH7AUHU8GW                       delmartian   \n",
       "1   2  B00813GRG4  A1D87F6ZCVE5NK                           dll pa   \n",
       "2   3  B000LQOCH0   ABXLMWJIXXAIN  Natalia Corres \"Natalia Corres\"   \n",
       "3   4  B000UA0QIQ  A395BORC6FGVXV                             Karl   \n",
       "4   5  B006K2ZZ7K  A1UQRSCLF8GW1T    Michael D. Bigham \"M. Wassir\"   \n",
       "\n",
       "   HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n",
       "0                     1                       1      5  1303862400   \n",
       "1                     0                       0      1  1346976000   \n",
       "2                     1                       1      4  1219017600   \n",
       "3                     3                       3      2  1307923200   \n",
       "4                     0                       0      5  1350777600   \n",
       "\n",
       "                 Summary                                               Text  \\\n",
       "0  Good Quality Dog Food  I have bought several of the Vitality canned d...   \n",
       "1      Not as Advertised  Product arrived labeled as Jumbo Salted Peanut...   \n",
       "2  \"Delight\" says it all  This is a confection that has been around a fe...   \n",
       "3         Cough Medicine  If you are looking for the secret ingredient i...   \n",
       "4            Great taffy  Great taffy at a great price.  There was a wid...   \n",
       "\n",
       "   sentiment  Helpful % % Upvote  \n",
       "0          1        1.0  80-100%  \n",
       "1          0       -1.0    Empty  \n",
       "2          1        1.0  80-100%  \n",
       "3          0        1.0  80-100%  \n",
       "4          1       -1.0    Empty  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sa['Helpful %'] = np.where(df_sa['HelpfulnessDenominator'] > 0, df_sa['HelpfulnessNumerator'] / df_sa['HelpfulnessDenominator'], -1)\n",
    "df_sa['% Upvote'] = pd.cut(df_sa['Helpful %'], bins = [-1, 0, 0.2, 0.4, 0.6, 0.8, 1.0], labels = ['Empty', '0-20%', '20-40%', '40-60%', '60-80%', '80-100%'], include_lowest = True)\n",
    "df_sa.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'How helpful users find among user scores')"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_s = df_sa.groupby(['Score', '% Upvote']).agg({'Id': 'count'})\n",
    "df_s = df_s.unstack()\n",
    "df_s.columns = df_s.columns.get_level_values(1)\n",
    "fig = plt.figure(figsize=(15,10))\n",
    "\n",
    "sns.heatmap(df_s[df_s.columns[::-1]].T, cmap = 'YlGnBu', linewidths=.5, annot = True, fmt = 'd', cbar_kws={'label': '# reviews'})\n",
    "plt.yticks(rotation=0)\n",
    "plt.title('How helpful users find among user scores')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transfer score column for Sentiment modeling  (1 = positive, 0 = negative)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df_sa[df_sa['Score'] != 3]\n",
    "X = df['Text']\n",
    "y_dict = {1:0, 2:0, 4:1, 5:1}\n",
    "y = df['Score'].map(y_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Score prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TF-IDF + n-gram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = CountVectorizer(stop_words = 'english')\n",
    "\n",
    "def text_fit(X, y, model,clf_model,coef_show=1):\n",
    "    \n",
    "    X_c = model.fit_transform(X)\n",
    "    print('# features: {}'.format(X_c.shape[1]))\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X_c, y, random_state=0)\n",
    "    print('# train records: {}'.format(X_train.shape[0]))\n",
    "    print('# test records: {}'.format(X_test.shape[0]))\n",
    "    clf = clf_model.fit(X_train, y_train)\n",
    "    acc = clf.score(X_test, y_test)\n",
    "    print ('Model Accuracy: {}'.format(acc))\n",
    "    \n",
    "    if coef_show == 1: \n",
    "        w = model.get_feature_names()\n",
    "        coef = clf.coef_.tolist()[0]\n",
    "        coeff_df = pd.DataFrame({'Word' : w, 'Coefficient' : coef})\n",
    "        coeff_df = coeff_df.sort_values(['Coefficient', 'Word'], ascending=[0, 1])\n",
    "        print('')\n",
    "        print('-Top 20 positive-')\n",
    "        print(coeff_df.head(20).to_string(index=False))\n",
    "        print('')\n",
    "        print('-Top 20 negative-')        \n",
    "        print(coeff_df.tail(20).to_string(index=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# features: 3933179\n",
      "# train records: 272927\n",
      "# test records: 90976\n",
      "Model Accuracy: 0.924969222652128\n",
      "\n",
      "-Top 20 positive-\n",
      "             Word  Coefficient\n",
      "            great    20.221672\n",
      "             best    16.582002\n",
      "        delicious    16.245422\n",
      "          perfect    13.548095\n",
      "             love    12.605128\n",
      "        excellent    12.259538\n",
      "            loves    11.812753\n",
      "             good    10.822963\n",
      "        wonderful    10.754047\n",
      "         favorite     9.749933\n",
      "             nice     9.713363\n",
      "          amazing     9.127063\n",
      "          awesome     8.667265\n",
      "           highly     8.431743\n",
      "            tasty     8.345127\n",
      "            happy     8.335865\n",
      "          pleased     8.292773\n",
      "             easy     8.204163\n",
      "           smooth     7.812555\n",
      " highly recommend     7.753235\n",
      "\n",
      "-Top 20 negative-\n",
      "           Word  Coefficient\n",
      "            bad    -7.293984\n",
      "      tasteless    -7.349642\n",
      "         hoping    -7.419719\n",
      "          waste    -7.472331\n",
      "     disgusting    -7.809997\n",
      "        thought    -7.825320\n",
      "          money    -8.281037\n",
      "           weak    -8.357276\n",
      "          threw    -8.915951\n",
      "          bland    -8.993204\n",
      "          stale    -9.424722\n",
      " disappointment    -9.496124\n",
      "         return    -9.656771\n",
      "  unfortunately    -9.947513\n",
      "       horrible   -10.627546\n",
      "          awful   -11.644754\n",
      "       terrible   -11.869308\n",
      "  disappointing   -12.346508\n",
      "          worst   -13.495078\n",
      "   disappointed   -13.845261\n"
     ]
    }
   ],
   "source": [
    "tfidf_n = TfidfVectorizer(ngram_range=(1,2),stop_words = 'english')\n",
    "text_fit(X, y, tfidf_n, LogisticRegression())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Upvote prediction\n",
    "### This study is to see whether there is pattern found for unpopular (downvote) comments by users (might be used to boost sales). We will be focusing on score 5 reviews, and get rid of comments with neutral votes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class distribution:\n",
      "1.0    108123\n",
      "0.0      1780\n",
      "Name: % Upvote, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "df = df[df['Score'] == 5]\n",
    "df = df[df['% Upvote'].isin(['0-20%', '20-40%', '60-80%', '80-100%'])]\n",
    "df.shape\n",
    "\n",
    "X = df['Text']\n",
    "y_dict = {'0-20%': 0, '20-40%': 0, '60-80%': 1, '80-100%': 1}\n",
    "y = df['% Upvote'].map(y_dict)\n",
    "\n",
    "print('Class distribution:')\n",
    "print(y.value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Resample to get balanced data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of upvote transactions:  0.5\n",
      "Percentage of downvote transactions:  0.5\n",
      "Total number of records in resampled data:  3560\n"
     ]
    }
   ],
   "source": [
    "df_s = pd.DataFrame(data = [X,y]).T\n",
    "\n",
    "Downvote_records = len(df_s[df_s['% Upvote'] == 0])\n",
    "Downvote_indices = np.array(df_s[df_s['% Upvote'] == 0].index)\n",
    "\n",
    "Upvote_indices = df_s[df_s['% Upvote'] == 1].index\n",
    "\n",
    "random_upvote_indices = np.random.choice(Upvote_indices, Downvote_records, replace = False)\n",
    "random_upvote_indices = np.array(random_upvote_indices)\n",
    "\n",
    "under_sample_indices = np.concatenate([Downvote_indices,random_upvote_indices])\n",
    "\n",
    "under_sample_data = df_s.ix[under_sample_indices, :]\n",
    "X_u = under_sample_data['Text']\n",
    "under_sample_data['% Upvote'] = under_sample_data['% Upvote'].astype(int)\n",
    "y_u = under_sample_data['% Upvote']\n",
    "\n",
    "\n",
    "print(\"Percentage of upvote transactions: \", len(under_sample_data[under_sample_data['% Upvote'] == 1])/len(under_sample_data))\n",
    "print(\"Percentage of downvote transactions: \", len(under_sample_data[under_sample_data['% Upvote'] == 0])/len(under_sample_data))\n",
    "print(\"Total number of records in resampled data: \", len(under_sample_data))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic regression model on TFIDF + ngram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# features: 117056\n",
      "# train records: 2670\n",
      "# test records: 890\n",
      "Model Accuracy: 0.6438202247191012\n",
      "\n",
      "-Top 20 positive-\n",
      "    Word  Coefficient\n",
      "    food     1.778206\n",
      "      ve     1.471738\n",
      "     mix     1.305219\n",
      "   fresh     1.231023\n",
      "     tea     1.225964\n",
      "    make     1.188232\n",
      "     bag     1.171146\n",
      "   bread     1.036851\n",
      "    best     1.025085\n",
      "  flavor     1.008549\n",
      "   tried     1.007473\n",
      "    used     0.947872\n",
      "    salt     0.908687\n",
      "  better     0.905758\n",
      "     hot     0.901791\n",
      "     lot     0.890266\n",
      "  family     0.889443\n",
      " perfect     0.867780\n",
      "    real     0.854893\n",
      "   wheat     0.851456\n",
      "\n",
      "-Top 20 negative-\n",
      "         Word  Coefficient\n",
      "      noodles    -0.603904\n",
      "         know    -0.607218\n",
      "       people    -0.607660\n",
      "       newman    -0.615600\n",
      "        wrong    -0.634743\n",
      "     brooklyn    -0.650132\n",
      "        drink    -0.662382\n",
      "        stars    -0.663912\n",
      "       bottle    -0.676528\n",
      "        ounce    -0.686655\n",
      "         wife    -0.706997\n",
      "       lipton    -0.721399\n",
      "          bar    -0.722156\n",
      "         good    -0.820290\n",
      "        order    -0.872350\n",
      "       seller    -0.876627\n",
      " great coffee    -0.904118\n",
      "      product    -0.992146\n",
      "           br    -1.224883\n",
      "        water    -1.663977\n"
     ]
    }
   ],
   "source": [
    "tfidf_n = TfidfVectorizer(ngram_range=(1,2),stop_words = 'english')\n",
    "\n",
    "text_fit(X_u, y_u, tfidf_n, LogisticRegression())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Text Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tc=reviews[['Text','sentiment']]\n",
    "df_tc['review']=reviews['Text']\n",
    "df_tc.drop(['Text'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    306819\n",
       "0     86856\n",
       "Name: sentiment, dtype: int64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tc['sentiment'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_reviews(review):  \n",
    "    \n",
    "    # 1. Removing html tags\n",
    "    review_text = BeautifulSoup(review,\"lxml\").get_text()\n",
    "    \n",
    "    # 2. Retaining only alphabets.\n",
    "    review_text = re.sub(\"[^a-zA-Z]\",\" \",review_text)\n",
    "    \n",
    "    # 3. Converting to lower case and splitting\n",
    "    word_tokens= review_text.lower().split()\n",
    "    \n",
    "    # 4. Remove stopwords\n",
    "    le=WordNetLemmatizer()\n",
    "    stop_words= set(nltk.corpus.stopwords.words(\"english\"))     \n",
    "    word_tokens= [le.lemmatize(w) for w in word_tokens if not w in stop_words]\n",
    "    \n",
    "    cleaned_review=\" \".join(word_tokens)\n",
    "    return cleaned_review"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(160000, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>I love these and so does my son. I have tasted...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Burly cat loves these shredded varieties but w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>I bought this item based on the good reviews i...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Got this at Costco three months ago because it...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>I have been using this product as a salad dres...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sentiment                                             review\n",
       "0          1  I love these and so does my son. I have tasted...\n",
       "1          0  Burly cat loves these shredded varieties but w...\n",
       "2          1  I bought this item based on the good reviews i...\n",
       "3          0  Got this at Costco three months ago because it...\n",
       "4          1  I have been using this product as a salad dres..."
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pos_df_tc=df_tc.loc[df_tc.sentiment==1,:][:80000]\n",
    "neg_df_tc=df_tc.loc[df_tc.sentiment==0,:][:80000]\n",
    "#combining\n",
    "df_tc=pd.concat([pos_df_tc,neg_df_tc],ignore_index=True)\n",
    "# shuffling rows\n",
    "df_tc = df_tc.sample(frac=1).reset_index(drop=True)\n",
    "print(df_tc.shape)  # perfectly fine.\n",
    "df_tc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "814216\n",
      "814216\n"
     ]
    }
   ],
   "source": [
    "tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')\n",
    "sentences=[]\n",
    "sum=0\n",
    "for review in df_tc['review']:\n",
    "        sents=tokenizer.tokenize(review.strip())\n",
    "        sum+=len(sents)\n",
    "        for sent in sents:\n",
    "            cleaned_sent=clean_reviews(sent)\n",
    "            sentences.append(cleaned_sent.split()) # can use word_tokenize also.\n",
    "print(sum)\n",
    "print(len(sentences))  # total no of sentences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['love', 'son'] \n",
      "\n",
      "['tasted', 'actually', 'taste', 'good'] \n",
      "\n",
      "['great', 'go', 'mess', 'free'] \n",
      "\n",
      "['ingredient', 'natural', 'packed', 'good', 'stuff', 'buy', 'sugar', 'little', 'high', 'liking', 'nearly', 'bad', 'organic', 'baby', 'yogurt'] \n",
      "\n",
      "['would', 'love', 'would', 'offer', 'variety', 'pack', 'son', 'seem', 'get', 'sick', 'one', 'since', 'last', 'one', 'packet'] \n",
      "\n",
      "['burly', 'cat', 'love', 'shredded', 'variety', 'mix', 'two', 'flavor', 'well', 'sure'] \n",
      "\n",
      "['love', 'shredded', 'chicken', 'shredded', 'salmon', 'one', 'well', 'eat', 'left'] \n",
      "\n",
      "['overjoyed', 'one', 'choke', 'necessary'] \n",
      "\n",
      "['suggest', 'keeping', 'separate', 'never', 'cat', 'yet', 'wildly', 'love', 'variety'] \n",
      "\n",
      "['bought', 'item', 'based', 'good', 'review', 'got', 'price'] \n",
      "\n",
      "['think', 'product', 'useful', 'baking', 'hot', 'tea', 'seems', 'require', 'lot', 'careful', 'mixing', 'much', 'hassle', 'quick', 'cuppa'] \n",
      "\n",
      "['green', 'brown', 'like', 'one', 'review', 'stated'] \n",
      "\n",
      "['bought', 'ice', 'cream', 'maker', 'planning', 'use', 'add', 'morning', 'smoothie', 'boost'] \n",
      "\n",
      "['recently', 'got', 'bag', 'starbucks', 'version', 'mixed', 'sugar', 'blend', 'easily', 'hot', 'water'] \n",
      "\n",
      "['sell', 'store', 'powder', 'form', 'like', 'buy', 'coffee', 'know', 'enough', 'people', 'starbucks', 'biz', 'get', 'regular', 'basis'] \n",
      "\n",
      "['think', 'stick', 'version', 'hot', 'tea', 'think', 'lb', 'bag', 'good', 'value', 'baking', 'purpose'] \n",
      "\n",
      "['hopefully', 'ice', 'cream', 'good', 'want'] \n",
      "\n",
      "['got', 'costco', 'three', 'month', 'ago', 'cheaper', 'lipton', 'go', 'green', 'tea'] \n",
      "\n",
      "['taste', 'much', 'like', 'mineral', 'water', 'slight', 'tea', 'flavor'] \n",
      "\n",
      "['bad', 'taste'] \n",
      "\n",
      "['drinking', 'since', 'bought', 'still', 'half', 'way', 'package'] \n",
      "\n",
      "['recommended'] \n",
      "\n",
      "['using', 'product', 'salad', 'dressing', 'almost', 'year', 'believe', 'say', 'without', 'doubt', 'tangy', 'absolutely', 'delicious'] \n",
      "\n",
      "['also', 'give', 'wonderful', 'taste', 'meat', 'used', 'basting', 'sauce', 'grilling', 'broiling'] \n",
      "\n",
      "['give', 'try', 'certain', 'really', 'like'] \n",
      "\n",
      "['definitely', 'indulgence', 'item'] \n",
      "\n",
      "['mind', 'calorie', 'serving', 'product', 'good', 'find', 'product', 'way', 'sweet', 'taste'] \n",
      "\n",
      "['overwhelmed', 'sweetness', 'could', 'really', 'get', 'much', 'pumpkin', 'flavor', 'flavor', 'sweet'] \n",
      "\n",
      "['grittiness', 'texture', 'enjoy'] \n",
      "\n",
      "['probably', 'sugar', 'granule', 'would', 'dissolve', 'go', 'away', 'even', 'product', 'heated'] \n",
      "\n",
      "['felt', 'like', 'biting', 'sand', 'piece'] \n",
      "\n",
      "['heated', 'particularly', 'microwave', 'oil', 'separate', 'solid', 'part', 'spend', 'couple', 'minute', 'mixing', 'back', 'try', 'pour', 'save', 'calorie', 'bit'] \n",
      "\n",
      "['wife', 'celiac', 'disease', 'slightly', 'hot', 'cracker', 'favorite', 'gluten', 'free', 'food'] \n",
      "\n",
      "['could', 'find', 'store', 'year'] \n",
      "\n",
      "['happy', 'find', 'amazon'] \n",
      "\n",
      "['ordered', 'came', 'quickly'] \n",
      "\n",
      "['great', 'snack', 'salad', 'thanks'] \n",
      "\n",
      "['worth', 'every', 'penney'] \n",
      "\n",
      "['rich', 'deeply', 'chocolatly'] \n",
      "\n",
      "['add', 'protein', 'shake', 'vitamix', 'ice', 'cream', 'really'] \n",
      "\n",
      "['also', 'love', 'warm', 'almond', 'butter', 'mix', 'tsp', 'coconut', 'oil', 'stir', 'add', 'cacao', 'stir', 'pour', 'vitamix', 'ice', 'cream', 'healthy', 'version', 'magic', 'shell', 'since', 'coconut', 'oil', 'become', 'firm', 'degree'] \n",
      "\n",
      "['omg', 'healthy', 'delicious'] \n",
      "\n",
      "['like', 'blueberry', 'love'] \n",
      "\n",
      "['husband', 'favorite', 'cereal'] \n",
      "\n",
      "['previously', 'tried', 'another', 'brand', 'hot', 'coca', 'k', 'cup'] \n",
      "\n",
      "['bought', 'since', 'seemed', 'pretty', 'good', 'value'] \n",
      "\n",
      "['actually', 'like', 'taste', 'flavor', 'brand', 'tried'] \n",
      "\n",
      "['right', 'amount', 'cocoa', 'sweetness'] \n",
      "\n",
      "['like', 'variety', 'flavor', 'pack', 'also'] \n",
      "\n",
      "['ya', 'say', 'chef', 'boyardee', 'ravioli', 'come', 'pop', 'lid', 'instead', 'microwavable', 'bowl', 'larger', 'portion', 'lower', 'price', 'subscribe', 'save', 'get', 'additional', 'offa', 'steal'] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "for te in sentences[:50]:\n",
    "    print(te,\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "w2v_model=gensim.models.Word2Vec(sentences=sentences,size=300,window=10,min_count=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60815031, 65199440)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w2v_model.train(sentences,epochs=10,total_examples=len(sentences))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.39164838,  0.61069405, -0.7820379 , -1.4615735 , -0.05243958,\n",
       "       -0.81848603, -0.02824778,  0.8249372 , -2.2336676 ,  0.8592582 ,\n",
       "       -0.4499763 , -1.2840904 , -0.39404643,  1.2204229 ,  0.22146747,\n",
       "        1.3591539 ,  1.6341201 ,  1.7061539 , -0.9394481 ,  0.51726705,\n",
       "       -0.39713025,  0.24047007, -0.9093119 ,  0.99902445,  1.0118561 ,\n",
       "        0.06999398, -1.34821   ,  0.67316335, -0.80762774, -0.17412351,\n",
       "       -0.22091426,  1.8206929 , -0.5418787 ,  0.4137003 ,  0.19196068,\n",
       "       -0.878243  , -0.6227399 , -0.31734452,  1.2735025 ,  0.54252225,\n",
       "       -0.05239918,  1.5085512 , -0.5385729 , -0.29609212, -0.04022799,\n",
       "       -0.46979925,  0.3028053 ,  0.04120096, -0.8541262 ,  0.63343996,\n",
       "       -0.7703397 ,  0.59673536,  0.34537286,  0.23289296,  0.15483068,\n",
       "        0.16360985,  0.28170052, -0.42536056, -0.5973401 ,  0.19021851,\n",
       "       -0.11204107,  0.06689321,  2.0994174 , -0.4271582 , -0.8813539 ,\n",
       "       -0.3348614 , -1.4003828 , -0.3622944 , -1.0604823 , -1.6321532 ,\n",
       "        0.18462616, -0.16148502, -1.3601351 ,  0.00928285, -0.01985543,\n",
       "        0.21737348, -1.5160344 , -0.74858844, -0.40631527,  0.48098013,\n",
       "        0.34613842, -0.3548847 ,  0.71352834,  0.49904376, -0.31771913,\n",
       "       -1.1093987 ,  1.4086328 , -0.9455116 , -0.1253612 ,  0.3253015 ,\n",
       "        0.8123374 , -0.3981966 ,  1.2045856 , -0.32528692,  1.4022443 ,\n",
       "       -0.11862905,  0.22087464, -0.38287646,  0.5593647 , -0.42681423,\n",
       "       -0.4444338 ,  0.33523646,  1.4689001 , -0.44749743, -0.5121588 ,\n",
       "       -0.29590487, -0.21334928, -0.8571751 ,  0.12061778,  0.51748824,\n",
       "       -0.14862533, -0.1788709 , -0.68669605, -0.9097517 , -0.26689306,\n",
       "        0.18850186, -0.9858867 ,  0.70812833,  0.67143005,  1.0563028 ,\n",
       "       -0.07082842, -0.30702242,  0.14370462,  1.2903756 , -0.5507135 ,\n",
       "        1.0078986 , -0.4567963 , -1.1946561 ,  0.2301962 ,  0.2984766 ,\n",
       "       -0.7759392 , -0.10901378, -0.01798519, -1.0059582 ,  1.0451906 ,\n",
       "        0.0173265 , -2.3867357 ,  0.36223763, -0.66825235,  0.26438698,\n",
       "        0.11521035, -1.2345904 ,  1.2706871 , -0.15502594,  1.3185378 ,\n",
       "        0.15321551,  0.77692217,  2.4136543 ,  0.46988413,  0.52658147,\n",
       "       -0.91606164, -0.14473517,  0.52517706, -0.30739886, -0.58940613,\n",
       "       -1.1304363 , -0.9854947 , -0.5384173 ,  0.68758583, -0.0575068 ,\n",
       "        1.61221   , -0.5734171 , -0.1375669 ,  1.1074556 ,  0.6436015 ,\n",
       "       -0.0557383 ,  0.1429517 ,  0.74378574,  0.14546688,  0.30529487,\n",
       "       -0.490742  , -1.516952  ,  0.3332118 ,  0.13947235,  0.32690188,\n",
       "       -0.33535457, -0.96156013, -0.1130759 , -0.3996545 ,  0.51062363,\n",
       "        0.72254515,  1.4480823 ,  0.03232296,  0.06067447, -1.0549068 ,\n",
       "        0.7096084 , -0.41714293,  0.6903745 ,  0.47676897,  0.61372036,\n",
       "        1.7786018 , -0.22565193, -0.18593149, -0.8897489 ,  1.0170633 ,\n",
       "        1.9301071 , -0.17746864,  0.9797601 ,  0.5249477 , -0.2982229 ,\n",
       "       -0.74707043, -0.2171748 , -0.9518492 , -0.48687163,  0.38503522,\n",
       "        0.6485294 , -0.6834887 ,  0.00499222,  0.14130525, -0.34227067,\n",
       "        0.9487697 , -0.8330286 ,  0.9159653 , -1.1051522 , -0.0194163 ,\n",
       "       -1.4514141 ,  0.5250765 , -0.3314376 , -0.31938377, -0.18418702,\n",
       "       -0.5338857 ,  0.24487755,  1.0577071 , -1.3190054 ,  1.431707  ,\n",
       "        0.8148064 , -0.29878137, -0.52462834,  0.44002953, -1.7272103 ,\n",
       "       -1.088035  ,  0.21005523,  0.71423864, -0.99542403,  0.31338406,\n",
       "        1.0604515 ,  0.1437136 ,  0.6577784 , -1.0567194 , -1.1738551 ,\n",
       "       -0.38279712, -2.0277388 , -1.2941921 , -0.8278227 ,  0.4979922 ,\n",
       "        0.6503755 ,  0.69574475, -0.2559807 , -0.02525265, -1.1869464 ,\n",
       "       -0.41446793, -0.576879  ,  0.89345604,  1.2841096 ,  0.79548866,\n",
       "       -0.6306831 , -0.53865653,  0.84635335, -0.23040493,  0.82461953,\n",
       "        0.84409946, -0.7582562 ,  0.8441823 , -0.44767293, -0.9694045 ,\n",
       "        1.4071558 , -0.5009176 , -1.0972415 ,  1.1996162 , -0.13835344,\n",
       "       -0.15531304,  0.78334826, -0.29366472,  0.83016723, -1.9516166 ,\n",
       "        0.66003895, -0.2946519 , -0.16700326, -0.45678285,  0.35936323,\n",
       "       -0.06159968, -0.03239746,  1.3104763 ,  0.29625452,  1.3406171 ,\n",
       "       -0.9626395 , -0.6592159 ,  0.36934605,  0.24796961,  1.271143  ,\n",
       "        0.6460124 , -0.03023509, -0.09276169,  1.2905977 , -0.26578882,\n",
       "       -0.10381731, -0.01141292, -0.65415114,  0.60858786,  1.3434421 ],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w2v_model.wv.get_vector('like')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total number of words are :  71929\n"
     ]
    }
   ],
   "source": [
    "# total numberof extracted words.\n",
    "vocab=w2v_model.wv.vocab\n",
    "print(\"The total number of words are : \",len(vocab))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.37556243"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# similaraity betweenn two words\n",
    "w2v_model.wv.similarity('good','like')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "vocab=list(vocab.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The no of key-value pairs :  71929\n"
     ]
    }
   ],
   "source": [
    "word_vec_dict={}\n",
    "for word in vocab:\n",
    "      word_vec_dict[word]=w2v_model.wv.get_vector(word)\n",
    "print(\"The no of key-value pairs : \",len(word_vec_dict)) # should come equal to vocab size"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Keras embedding layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "# cleaning reviews.\n",
    "df_tc['clean_review']=df_tc['review'].apply(clean_reviews)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         love son tasted actually taste good great go m...\n",
       "1         burly cat love shredded variety mix two flavor...\n",
       "2         bought item based good review got price think ...\n",
       "3         got costco three month ago cheaper lipton go g...\n",
       "4         using product salad dressing almost year belie...\n",
       "                                ...                        \n",
       "159995    drink mix labeled instant ginger lemon beverag...\n",
       "159996    tea vacation seattle instantly hooked family f...\n",
       "159997    normally take time review thing feel everybody...\n",
       "159998    even aware emerald cocoa roast almond earlier ...\n",
       "159999    love chocolate chip cooky based rave review or...\n",
       "Name: clean_review, Length: 160000, dtype: object"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tc['clean_review']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1956\n"
     ]
    }
   ],
   "source": [
    "maxi=-1\n",
    "for i,rev in enumerate(df_tc['clean_review']):\n",
    "    tokens=rev.split()\n",
    "    if(len(tokens)>maxi):\n",
    "        maxi=len(tokens)\n",
    "print(maxi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "tok = Tokenizer()\n",
    "tok.fit_on_texts(df_tc['clean_review'])\n",
    "vocab_size = len(tok.word_index) + 1\n",
    "encd_rev = tok.texts_to_sequences(df_tc['clean_review'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_rev_len=1956  # max lenght of a review\n",
    "vocab_size = len(tok.word_index) + 1  # total no of words\n",
    "embed_dim=300 # embedding dimension as choosen in word2vec constructor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(160000, 1956)"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# now padding to have a amximum length of 1956\n",
    "pad_rev= pad_sequences(encd_rev, maxlen=max_rev_len, padding='post')\n",
    "pad_rev.shape   # note that we had 100K reviews and we have padded each review to have  a lenght of 1565 words."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating the embedding matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "# now creating the embedding matrix\n",
    "embed_matrix=np.zeros(shape=(vocab_size,embed_dim))\n",
    "for word,i in tok.word_index.items():\n",
    "    embed_vector=word_vec_dict.get(word)\n",
    "    if embed_vector is not None:  # word is in the vocabulary learned by the w2v model\n",
    "        embed_matrix[i]=embed_vector\n",
    "  # if word is not found then embed_vector corressponding to that vector will stay zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-2.45465264e-01  4.04269457e-01  4.22755778e-01 -1.38366151e+00\n",
      "  9.83495295e-01  2.30054371e-03  5.30927718e-01  5.63399158e-02\n",
      " -6.98487282e-01 -3.78958166e-01  3.05412799e-01 -7.98934519e-01\n",
      "  3.34713012e-01 -6.87775433e-01  1.29515898e+00 -7.24196494e-01\n",
      "  3.70868444e-01  1.27651966e+00 -4.98244941e-01 -5.16410291e-01\n",
      "  4.83663559e-01  6.83279634e-01  1.62142545e-01  9.24685478e-01\n",
      "  6.38372123e-01 -7.14564741e-01 -8.99341881e-01  7.46738076e-01\n",
      "  5.62468112e-01 -1.05089295e+00  3.21854025e-01  2.26047020e-02\n",
      " -5.16620398e-01 -8.23188961e-01  7.73777068e-01 -1.22270083e+00\n",
      " -6.04269564e-01 -8.68841648e-01 -8.17134976e-01  8.22826266e-01\n",
      " -1.55000603e+00  3.82321566e-01 -7.23432302e-01  6.54199421e-01\n",
      " -1.29897273e+00 -1.55543303e+00 -2.96533793e-01 -9.97223053e-03\n",
      " -4.74676579e-01  6.14153743e-02  1.15855172e-01 -5.29395700e-01\n",
      "  5.78769028e-01  7.99984157e-01  2.01953505e-03  2.62478143e-01\n",
      "  5.00716455e-02  5.41940689e-01  5.01411080e-01 -1.17736585e-01\n",
      " -8.52287859e-02  2.02522948e-01  1.42559372e-02  3.17671567e-01\n",
      " -1.52790403e+00 -1.35117400e+00  1.09797680e+00 -7.65716553e-01\n",
      " -3.41431201e-01  3.16556059e-02 -5.87597847e-01 -1.41633123e-01\n",
      "  1.19864261e+00  6.40622139e-01  1.27500370e-01 -5.91927052e-01\n",
      " -1.39399564e+00 -1.07461989e+00 -3.59715134e-01 -1.49274766e-01\n",
      "  1.98332414e-01 -9.43300366e-01 -4.63489085e-01  2.52199680e-01\n",
      " -1.15688890e-03  5.57984598e-03 -7.81425774e-01  3.85637619e-02\n",
      "  8.87826920e-01 -1.83562841e-02  1.27183592e+00  4.31976378e-01\n",
      " -1.71058811e-02 -3.05172384e-01  1.91744447e-01  5.12172759e-01\n",
      "  7.70201758e-02  1.33465564e+00  8.44070137e-01 -5.65400481e-01\n",
      " -2.84031391e-01 -6.47416651e-01  4.99037564e-01  1.84030280e-01\n",
      " -1.20762110e+00  1.51530910e+00 -9.79042768e-01  1.12576500e-01\n",
      "  2.40527928e-01  1.53645813e-01 -2.76237577e-01 -8.22957873e-01\n",
      "  5.91010451e-02 -1.56911957e+00  2.63503581e-01  1.16545868e+00\n",
      "  1.27729595e-01  7.87674427e-01  1.47911832e-01  1.77135497e-01\n",
      "  7.03924656e-01 -1.42711988e-02 -3.84598166e-01 -7.93540835e-01\n",
      "  1.22182751e+00  1.21390927e+00 -1.08849788e+00 -1.79302230e-01\n",
      "  4.12592620e-01  9.08180296e-01 -6.93641245e-01 -2.01494351e-01\n",
      "  9.55605984e-01  8.50833237e-01 -1.20576084e-01 -6.33691669e-01\n",
      "  2.15076178e-01 -1.50629491e-01 -5.08333504e-01 -9.74181831e-01\n",
      " -7.88478792e-01 -1.18962731e-02  1.01569612e-02 -9.69803929e-02\n",
      "  1.12970519e+00 -6.78138316e-01  3.63353610e-01  6.48408651e-01\n",
      " -3.31396550e-01  7.23955929e-01  3.95979315e-01  5.42810559e-01\n",
      "  3.41982871e-01  7.53848970e-01 -4.46057767e-01  5.30385315e-01\n",
      " -7.54527986e-01 -3.70953500e-01  8.75683650e-02 -6.10900164e-01\n",
      "  2.31473184e+00 -8.88643742e-01  5.85732579e-01 -1.20633118e-01\n",
      "  6.06244624e-01  1.24350481e-01 -1.34289742e+00  4.69185442e-01\n",
      "  3.16904813e-01 -1.77461481e+00  3.91597390e-01 -1.38027847e+00\n",
      " -4.57278430e-01 -6.33760214e-01 -1.18559146e+00  2.71055460e-01\n",
      " -3.03701758e-01  3.96273434e-01 -7.04153717e-01  1.41536796e+00\n",
      " -5.92454493e-01  4.48709279e-01  8.23377073e-02  8.50649893e-01\n",
      "  4.38062459e-01 -8.42124224e-02 -2.71320373e-01 -7.96247005e-01\n",
      "  4.71225232e-01  3.32071185e-01  3.09528530e-01  1.58448666e-01\n",
      "  3.48011442e-02 -7.19214439e-01 -4.27442968e-01  1.02444339e+00\n",
      " -5.54168582e-01  1.07155284e-02  4.71557081e-01 -1.90400422e-01\n",
      " -9.67813358e-02  2.14483947e-01 -2.60124177e-01  1.53167248e-01\n",
      " -5.30706719e-02  1.81396708e-01  5.41319139e-02 -1.73609340e+00\n",
      " -1.85618132e-01 -2.09702775e-01  3.10878515e-01 -1.87786555e+00\n",
      "  7.64967740e-01  4.40587997e-01  1.02637148e+00 -1.60623446e-01\n",
      " -1.94503725e-01 -9.06878054e-01 -4.06776696e-01 -2.13799719e-02\n",
      " -2.45885596e-01 -4.39736158e-01  3.15010905e-01  2.48871610e-01\n",
      " -3.21506821e-02  1.09188187e+00 -8.47182333e-01  4.04971242e-02\n",
      "  4.02797461e-01 -1.43822106e-02 -6.92502916e-01 -2.74809361e-01\n",
      "  3.89882356e-01 -4.01169807e-01  2.62412559e-02 -5.52872241e-01\n",
      " -7.53474057e-01  4.03580628e-02 -7.47785151e-01 -5.21688282e-01\n",
      "  5.35388105e-03  1.04509079e+00  2.03410238e-01 -3.37262511e-01\n",
      "  5.21111786e-01  3.56801778e-01  1.29267788e+00 -3.11029404e-01\n",
      "  3.43140155e-01 -4.15576667e-01  2.82042027e-01 -1.23286521e+00\n",
      " -7.08964050e-01  7.40224779e-01  5.78275502e-01 -7.35341191e-01\n",
      "  4.72962499e-01  9.16828334e-01  1.42632395e-01 -8.64205360e-01\n",
      "  5.48447490e-01  8.88255477e-01 -1.45353273e-01  4.31555331e-01\n",
      " -1.34706712e+00 -4.72173750e-01 -2.99952745e-01 -3.95187110e-01\n",
      " -9.74477381e-02 -2.82108486e-01  4.70457494e-01  8.81285146e-02\n",
      " -6.37091219e-01 -7.53680170e-02 -4.10574704e-01  7.61614442e-01\n",
      "  1.37566388e+00 -3.01088691e-01 -8.35738480e-01  5.09326458e-01\n",
      "  3.61971468e-01  1.04312599e+00  8.43309224e-01 -9.15789604e-02\n",
      " -5.97424209e-02 -8.31979930e-01  4.34154719e-02  6.46414518e-01\n",
      " -3.42095584e-01 -3.65341842e-01 -3.12572062e-01  6.58727467e-01\n",
      "  2.70454902e-02  3.26014698e-01  9.16661739e-01 -1.28785670e+00\n",
      "  6.19663179e-01  1.10850982e-01  4.43973802e-02  3.52838606e-01]\n"
     ]
    }
   ],
   "source": [
    "print(embed_matrix[14])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "# prepare train and val sets first\n",
    "Y=keras.utils.to_categorical(df_tc['sentiment'])  # one hot target as required by NN.\n",
    "x_train,x_test,y_train,y_test=train_test_split(pad_rev,Y,test_size=0.20,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.initializers import Constant\n",
    "from keras.layers import ReLU\n",
    "from keras.layers import Dropout\n",
    "\n",
    "model=Sequential()\n",
    "model.add(Embedding(input_dim=vocab_size,output_dim=embed_dim,input_length=max_rev_len,embeddings_initializer=Constant(embed_matrix)))\n",
    "# model.add(CuDNNLSTM(64,return_sequences=False)) # loss stucks \n",
    "model.add(Flatten())\n",
    "model.add(Dense(16,activation='relu'))\n",
    "model.add(Dropout(0.50))\n",
    "# model.add(Dense(16,activation='relu'))\n",
    "# model.add(Dropout(0.20))\n",
    "model.add(Dense(2,activation='sigmoid'))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_2 (Embedding)      (None, 1956, 300)         21579000  \n",
      "_________________________________________________________________\n",
      "flatten_2 (Flatten)          (None, 586800)            0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 16)                9388816   \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 16)                0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 2)                 34        \n",
      "=================================================================\n",
      "Total params: 30,967,850\n",
      "Trainable params: 30,967,850\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# compile the model\n",
    "model.compile(optimizer=keras.optimizers.RMSprop(lr=1e-3),loss='binary_crossentropy',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# specify batch size and epocj=hs for training.\n",
    "epochs=5\n",
    "batch_size=64"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 128000 samples, validate on 32000 samples\n",
      "Epoch 1/5\n",
      "128000/128000 [==============================] - 99s 771us/step - loss: 0.5592 - accuracy: 0.7156 - val_loss: 0.4140 - val_accuracy: 0.8191\n",
      "Epoch 2/5\n",
      "128000/128000 [==============================] - 97s 760us/step - loss: 0.4461 - accuracy: 0.8023 - val_loss: 0.3747 - val_accuracy: 0.8353\n",
      "Epoch 3/5\n",
      "128000/128000 [==============================] - 97s 762us/step - loss: 0.3930 - accuracy: 0.8328 - val_loss: 0.3880 - val_accuracy: 0.8312\n",
      "Epoch 4/5\n",
      "128000/128000 [==============================] - 97s 761us/step - loss: 0.3621 - accuracy: 0.8464 - val_loss: 0.3959 - val_accuracy: 0.8330\n",
      "Epoch 5/5\n",
      "128000/128000 [==============================] - 97s 761us/step - loss: 0.3394 - accuracy: 0.8582 - val_loss: 0.4005 - val_accuracy: 0.8370\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.callbacks.History at 0x1e47f270048>"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fitting the model.\n",
    "model.fit(x_train,y_train,epochs=epochs,batch_size=batch_size,validation_data=(x_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part three: Text Summarization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ts = reviews.dropna(subset=['Text','Summary'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ts['clean_text']  = df_ts['Text'].apply(clean_reviews)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ts['clean_summary'] = df_ts['Summary'].apply(clean_reviews)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clean the summaries and texts\n",
    "clean_summaries = list(df_ts['clean_summary'])\n",
    "clean_texts = list(df_ts['clean_text'] )\n",
    "clean_full = clean_summaries + clean_texts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def count_words(count_dict, text):\n",
    "    '''Count the number of occurrences of each word in a set of text'''\n",
    "    for sentence in text:\n",
    "        for word in sentence.split():\n",
    "            if word not in count_dict:\n",
    "                count_dict[word] = 1\n",
    "            else:\n",
    "                count_dict[word] += 1\n",
    "\n",
    "# Find the number of times each word was used and the size of the vocabulary\n",
    "word_counts = {}\n",
    "\n",
    "count_words(word_counts, clean_summaries)\n",
    "count_words(word_counts, clean_texts)\n",
    "            \n",
    "print(\"Size of Vocabulary:\", len(word_counts))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "word_counts = {}\n",
    "\n",
    "count_words(word_counts, clean_summaries)\n",
    "count_words(word_counts, clean_texts)\n",
    "print(\"Size of Vocabulary:\", len(word_counts))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')\n",
    "sentences=[]\n",
    "sum=0\n",
    "for review in clean_full:\n",
    "        sents=tokenizer.tokenize(review.strip())\n",
    "        sum+=len(sents)\n",
    "        for sent in sents:\n",
    "            cleaned_sent=clean_reviews(sent)\n",
    "            sentences.append(cleaned_sent.split()) # can use word_tokenize also.\n",
    "print(sum)\n",
    "print(len(sentences))  # total no of sentences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "w2v_model=gensim.models.Word2Vec(sentences=sentences,size=300,window=10,min_count=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
